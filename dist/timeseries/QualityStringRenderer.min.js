"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.QualityStringRenderer=void 0;const Quality_1=require("./Quality");class QualityStringRenderer{static getSymbolicString(t){return QualityStringRenderer.getString(t,QualityStringRenderer.SYMBOLIC_STRING)}static getString(t,i){let e=t,r=new Int32Array(4);if(r[3]=e&Quality_1.Quality.MASK_BYTE,r[2]=e>>8&Quality_1.Quality.MASK_BYTE,r[1]=e>>16&Quality_1.Quality.MASK_BYTE,r[0]=e>>24&Quality_1.Quality.MASK_BYTE,i===QualityStringRenderer.BINARY_STRING)return this.pad(e.toString(e),0);if(i===QualityStringRenderer.HEX_STRING)return this.pad(e.toString(e),QualityStringRenderer.HEX_STRING);if(i===QualityStringRenderer.OCTAL_STRING)return this.pad(e.toString(e),QualityStringRenderer.OCTAL_STRING);if(i===QualityStringRenderer.INTEGER_STRING)return e.toString();let l="";return 4===i?(Quality_1.Quality.isQualityClear(r)?l+=" * ":(Quality_1.Quality.isBitSet(r,32)?l+="P":l+=" ",Quality_1.Quality.isBitSet(r,3)&&(l+="M"),Quality_1.Quality.isBitSet(r,5)&&(l+="R"),Quality_1.Quality.isBitSet(r,4)&&(l+="Q"),1===l.length&&(l+=" ")),l):5===i?(Quality_1.Quality.isAccepted(r)?l+="A":Quality_1.Quality.isInterpolated(r)?l+="I":Quality_1.Quality.isKeyboardInput(r)?l+="K":Quality_1.Quality.isGraphicalEstimate(r)?l+="E":l+=" ",l):6===i?(Quality_1.Quality.isBitSet(r,16)&&(l+="AM"),Quality_1.Quality.isBitSet(r,17)&&(l.length>0&&(l+=","),l+="CV"),Quality_1.Quality.isBitSet(r,18)&&(l.length>0&&(l+=","),l+="RC"),Quality_1.Quality.isBitSet(r,19)&&(l.length>0&&(l+=","),l+="RM"),Quality_1.Quality.isBitSet(r,20)&&(l.length>0&&(l+=","),l+="DM"),Quality_1.Quality.isBitSet(r,21)&&(l.length>0&&(l+=","),l+="NI"),Quality_1.Quality.isBitSet(r,23)&&(l.length>0&&(l+=","),l+="GL"),Quality_1.Quality.isBitSet(r,25)&&(l.length>0&&(l+=","),l+="UD"),Quality_1.Quality.isBitSet(r,26)&&(l.length>0&&(l+=","),l+="DS"),l):e.toString(16)}static pad(t,i){if(i==QualityStringRenderer.INTEGER_STRING)return t;const e=t.length,r=[32,11,8][i]-e;return Quality_1.Quality.PADDING[r]+t}}QualityStringRenderer.FG_COLOR_PREFIX="qf_color_",QualityStringRenderer.BG_COLOR_PREFIX="qf_bg_color_",QualityStringRenderer.SYMBOL_TO_COLORED_HTML_CACHE=new Map,QualityStringRenderer.SYMBOLIC_BG_COLOR_MAP=new Map([["A","darkgreen"],["*","blue"],["Q","yellow"],["R","red"],["M","black"],["P","cyan"],["I","lightpurple"],["K","purple"],["E","darkpurple"]]),QualityStringRenderer.symbolicFgColorMap=new Map([["A","white"],["*","white"],["Q","black"],["R","white"],["M","white"],["P","black"],["I","white"],["K","white"],["E","white"]]),QualityStringRenderer.LIGHT_RED="rgb(255, 90, 90)",QualityStringRenderer.LIGHT_BLUE="rgb(0, 200, 255)",QualityStringRenderer.LIGHT_CYAN="rgb(150, 255, 255)",QualityStringRenderer.LIGHT_GREEN="rgb(150, 255, 150)",QualityStringRenderer.LIGHT_MAGENTA="rgb(255, 125, 255)",QualityStringRenderer.LIGHT_PINK="rgb(255, 210, 210)",QualityStringRenderer.LIGHT_YELLOW="rgb(255, 255, 150)",QualityStringRenderer.LIGHT_ORANGE="rgb(255, 200, 125)",QualityStringRenderer.PURPLE="rgb(128, 0, 128)",QualityStringRenderer.BINARY_STRING=0,QualityStringRenderer.OCTAL_STRING=1,QualityStringRenderer.HEX_STRING=2,QualityStringRenderer.INTEGER_STRING=3,QualityStringRenderer.SYMBOLIC_STRING=4,QualityStringRenderer.SYMBOLIC_REVISED_STRING=5,QualityStringRenderer.SYMBOLIC_TESTS_STRING=6,QualityStringRenderer.previousColorMap=new Map,exports.QualityStringRenderer=QualityStringRenderer;