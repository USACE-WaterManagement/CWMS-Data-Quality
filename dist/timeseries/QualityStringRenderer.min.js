import{Quality}from"./Quality.js";class QualityStringRenderer{static getSymbolicString(e){return QualityStringRenderer.getString(e,QualityStringRenderer.SYMBOLIC_STRING)}static getJSON(e){return{QUALITY_CODE:e,SCREENED_ID:Quality.isScreened_int(e)?"SCREENED":"UNSCREENED",VALIDITY_ID:Quality.getValidity_int(e),RANGE_ID:Quality.getRange_int(e),CHANGED_ID:Quality.isDifferentValue_int(e)?"MODIFIED":"ORIGINAL",REPL_CAUSE_ID:Quality.getReplaceCause_int(e),REPL_METHOD_ID:Quality.getReplaceMethod_int(e),TEST_FAILED_ID:Quality.getTestFailed_int(e),PROTECTION_ID:Quality.isProtected_int(e)?"PROTECTED":"UNPROTECTED"}}static getString(e,t){let i=e,r=new Int32Array(4);if(r[3]=i&Quality.MASK_BYTE,r[2]=i>>8&Quality.MASK_BYTE,r[1]=i>>16&Quality.MASK_BYTE,r[0]=i>>24&Quality.MASK_BYTE,t===QualityStringRenderer.BINARY_STRING)return this.pad(i.toString(i),QualityStringRenderer.BINARY_STRING);if(t===QualityStringRenderer.HEX_STRING)return this.pad(i.toString(i),QualityStringRenderer.HEX_STRING);if(t===QualityStringRenderer.OCTAL_STRING)return this.pad(i.toString(i),QualityStringRenderer.OCTAL_STRING);if(t===QualityStringRenderer.INTEGER_STRING)return i.toString();let n="";return t===QualityStringRenderer.SYMBOLIC_STRING?(Quality.isQualityClear(r)?n+=" * ":(Quality.isProtected(r)?n+="P":n+=" ",Quality.isMissing(r)&&(n+="M"),Quality.isReject(r)&&(n+="R"),Quality.isQuestion(r)&&(n+="Q"),1===n.length&&(n+=" ")),n):t===QualityStringRenderer.SYMBOLIC_REVISED_STRING?(Quality.isAccepted(r)?n+="A":Quality.isInterpolated(r)?n+="I":Quality.isKeyboardInput(r)?n+="K":Quality.isGraphicalEstimate(r)?n+="E":n+=" ",n):t===QualityStringRenderer.SYMBOLIC_TESTS_STRING?(Quality.isAbsoluteMagnitude(r)&&(n+="AM"),Quality.isConstantValue(r)&&(n.length>0&&(n+=","),n+="CV"),Quality.isRateOfChange(r)&&(n.length>0&&(n+=","),n+="RC"),Quality.isRelativeMagnitude(r)&&(n.length>0&&(n+=","),n+="RM"),Quality.isDurationMagnitude(r)&&(n.length>0&&(n+=","),n+="DM"),Quality.isNegativeIncremental(r)&&(n.length>0&&(n+=","),n+="NI"),Quality.isGageList(r)&&(n.length>0&&(n+=","),n+="GL"),Quality.isUserDefinedTest(r)&&(n.length>0&&(n+=","),n+="UD"),Quality.isDistributionTest(r)&&(n.length>0&&(n+=","),n+="DS"),n):i.toString(i)}static pad(e,t){if(t==QualityStringRenderer.INTEGER_STRING)return e;const i=e.length,r=[32,11,8][t]-i;return Quality.PADDING[r]+e}static getDefaultSymbolicFgColorMap(){return QualityStringRenderer.symbolicFgColorMap}static generateColorPrefMap(){throw new Error("Not Implimented")}static convertToColoredHtml(e,t){throw new Error("Not Implimented")}static getDefaultSymbolicBgColorMap(){throw new Error("Not Implimented")}static getColorLineForChar(e,t){throw new Error("Not Implimented")}static parseColorString(e){throw new Error("Not Implimented")}static parseRGBString(e){throw new Error("Not Implimented")}static parseInt(e){throw new Error("Not Implimented")}static removeChar(e,t){throw new Error("Not Implimented")}static getSymbolicRevisedString(e){return QualityStringRenderer.getString(e,QualityStringRenderer.SYMBOLIC_REVISED_STRING)}static getColoredHtmlSymbolicString(e,t){return t||(t=QualityStringRenderer.generateColorPrefMap()),QualityStringRenderer.convertToColoredHtml(QualityStringRenderer.getSymbolicString(e)+QualityStringRenderer.getSymbolicRevisedString(e),t)}static getSymbolicTestsString(e){return QualityStringRenderer.getString(e,QualityStringRenderer.SYMBOLIC_TESTS_STRING)}static toBinaryStringFromBytes(e){throw new Error("Not Implimented")}static getHtmlStringDescription(e){return QualityStringRenderer.getStringDescription(e,", ","<br>")}static getStringDescription(e,t,i){t&&i||(t=", ",i="\n");const r=new Int32Array(4);if(r[3]=e&Quality.MASK_BYTE,r[2]=e>>8&Quality.MASK_BYTE,r[1]=e>>16&Quality.MASK_BYTE,r[0]=e>>24&Quality.MASK_BYTE,Quality.isQualityClear(r))return"Quality is not set";let n="";return QualityStringRenderer.checkPrimaryBits(n,r,t),QualityStringRenderer.checkRevisionBits(n,r,i),QualityStringRenderer.checkTestBits(n,r,i),Quality.isProtected(r)&&(n.length>0&&(n+=i),n+="PROTECTED from change or replacement"),n}static appendTextWithDelimeter(e,t,i){return e.length>0&&(e+=t),e+=i}static checkPrimaryBits(e,t,i){return Quality.isScreened(t)?e+="Screened":e+="Not Screened",Quality.isOkay(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Passed tests OK")),Quality.isMissing(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Set to Missing")),Quality.isQuestion(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Questionable Quality")),Quality.isReject(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Rejected Quality")),e}static checkRevisionBits(e,t,i){return Quality.isRange1(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Value is between first and second range limit")),Quality.isRange2(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Value is between second and third range limit")),Quality.isRange3(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Value is above third range limit")),Quality.isDifferentValue(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Current value is different from original value")),Quality.isRevisedAutomatically(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Revised automatically by DATCHK or other Process")),Quality.isRevisedInteractively(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Revised interactively with DATVUE or CWMS Verification Editor")),Quality.isRevisedManually(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Manual entry with DATVUE or CWMS Verification Editor")),Quality.isRevisedToOriginalAccepted(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Original value accepted in DATVUE or CWMS Verification Editor")),Quality.isReplaceLinearInterpolation(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Replacement method: linear interpolation")),Quality.isReplaceManualChange(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Replacement method: manual change")),Quality.isReplaceWithMissing(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Replacement method: replace with missing value")),Quality.isReplaceGraphicalChange(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Replacement method: graphical change")),e}static checkTestBits(e,t,i){return Quality.isAbsoluteMagnitude(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Failed Test: Absolute Magnitude")),Quality.isConstantValue(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Failed Test: Constant Value")),Quality.isRateOfChange(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Failed Test: Rate-of-change")),Quality.isRelativeMagnitude(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Failed Test: Relative Magnitude")),Quality.isDurationMagnitude(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Failed Test: Duration-magnitude")),Quality.isNegativeIncremental(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Failed Test: Negative Incremental Value")),Quality.isGageList(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Failed Test: On GAGE list as faulty gage")),Quality.isUserDefinedTest(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Failed Test: User-defined Test")),Quality.isDistributionTest(t)&&(e+=QualityStringRenderer.appendTextWithDelimeter(e,i,"Failed Test: Distribution Test")),e}}QualityStringRenderer.FG_COLOR_PREFIX="qf_color_",QualityStringRenderer.BG_COLOR_PREFIX="qf_bg_color_",QualityStringRenderer.SYMBOL_TO_COLORED_HTML_CACHE=new Map,QualityStringRenderer.SYMBOLIC_BG_COLOR_MAP=new Map([["A","darkgreen"],["*","blue"],["Q","yellow"],["R","red"],["M","black"],["P","cyan"],["I","lightpurple"],["K","purple"],["E","darkpurple"]]),QualityStringRenderer.symbolicFgColorMap=new Map([["A","white"],["*","white"],["Q","black"],["R","white"],["M","white"],["P","black"],["I","white"],["K","white"],["E","white"]]),QualityStringRenderer.BINARY_STRING=0,QualityStringRenderer.OCTAL_STRING=1,QualityStringRenderer.HEX_STRING=2,QualityStringRenderer.INTEGER_STRING=3,QualityStringRenderer.SYMBOLIC_STRING=4,QualityStringRenderer.SYMBOLIC_REVISED_STRING=5,QualityStringRenderer.SYMBOLIC_TESTS_STRING=6,QualityStringRenderer.previousColorMap=new Map;export{QualityStringRenderer};