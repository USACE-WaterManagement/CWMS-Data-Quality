import{Quality}from"./Quality.js";class QualityStringRenderer{static getSymbolicString(t){return QualityStringRenderer.getString(t,QualityStringRenderer.SYMBOLIC_STRING)}static getString(t,e){let i=t,r=new Int32Array(4);if(r[3]=i&Quality.MASK_BYTE,r[2]=i>>8&Quality.MASK_BYTE,r[1]=i>>16&Quality.MASK_BYTE,r[0]=i>>24&Quality.MASK_BYTE,e===QualityStringRenderer.BINARY_STRING)return this.pad(i.toString(i),0);if(e===QualityStringRenderer.HEX_STRING)return this.pad(i.toString(i),QualityStringRenderer.HEX_STRING);if(e===QualityStringRenderer.OCTAL_STRING)return this.pad(i.toString(i),QualityStringRenderer.OCTAL_STRING);if(e===QualityStringRenderer.INTEGER_STRING)return i.toString();let n="";return 4===e?(Quality.isQualityClear(r)?n+=" * ":(Quality.isBitSet(r,32)?n+="P":n+=" ",Quality.isBitSet(r,3)&&(n+="M"),Quality.isBitSet(r,5)&&(n+="R"),Quality.isBitSet(r,4)&&(n+="Q"),1===n.length&&(n+=" ")),n):5===e?(Quality.isAccepted(r)?n+="A":Quality.isInterpolated(r)?n+="I":Quality.isKeyboardInput(r)?n+="K":Quality.isGraphicalEstimate(r)?n+="E":n+=" ",n):6===e?(Quality.isBitSet(r,16)&&(n+="AM"),Quality.isBitSet(r,17)&&(n.length>0&&(n+=","),n+="CV"),Quality.isBitSet(r,18)&&(n.length>0&&(n+=","),n+="RC"),Quality.isBitSet(r,19)&&(n.length>0&&(n+=","),n+="RM"),Quality.isBitSet(r,20)&&(n.length>0&&(n+=","),n+="DM"),Quality.isBitSet(r,21)&&(n.length>0&&(n+=","),n+="NI"),Quality.isBitSet(r,23)&&(n.length>0&&(n+=","),n+="GL"),Quality.isBitSet(r,25)&&(n.length>0&&(n+=","),n+="UD"),Quality.isBitSet(r,26)&&(n.length>0&&(n+=","),n+="DS"),n):i.toString(16)}static pad(t,e){if(e==QualityStringRenderer.INTEGER_STRING)return t;const i=t.length,r=[32,11,8][e]-i;return Quality.PADDING[r]+t}}QualityStringRenderer.FG_COLOR_PREFIX="qf_color_",QualityStringRenderer.BG_COLOR_PREFIX="qf_bg_color_",QualityStringRenderer.SYMBOL_TO_COLORED_HTML_CACHE=new Map,QualityStringRenderer.SYMBOLIC_BG_COLOR_MAP=new Map([["A","darkgreen"],["*","blue"],["Q","yellow"],["R","red"],["M","black"],["P","cyan"],["I","lightpurple"],["K","purple"],["E","darkpurple"]]),QualityStringRenderer.symbolicFgColorMap=new Map([["A","white"],["*","white"],["Q","black"],["R","white"],["M","white"],["P","black"],["I","white"],["K","white"],["E","white"]]),QualityStringRenderer.LIGHT_RED="rgb(255, 90, 90)",QualityStringRenderer.LIGHT_BLUE="rgb(0, 200, 255)",QualityStringRenderer.LIGHT_CYAN="rgb(150, 255, 255)",QualityStringRenderer.LIGHT_GREEN="rgb(150, 255, 150)",QualityStringRenderer.LIGHT_MAGENTA="rgb(255, 125, 255)",QualityStringRenderer.LIGHT_PINK="rgb(255, 210, 210)",QualityStringRenderer.LIGHT_YELLOW="rgb(255, 255, 150)",QualityStringRenderer.LIGHT_ORANGE="rgb(255, 200, 125)",QualityStringRenderer.PURPLE="rgb(128, 0, 128)",QualityStringRenderer.BINARY_STRING=0,QualityStringRenderer.OCTAL_STRING=1,QualityStringRenderer.HEX_STRING=2,QualityStringRenderer.INTEGER_STRING=3,QualityStringRenderer.SYMBOLIC_STRING=4,QualityStringRenderer.SYMBOLIC_REVISED_STRING=5,QualityStringRenderer.SYMBOLIC_TESTS_STRING=6,QualityStringRenderer.previousColorMap=new Map;export{QualityStringRenderer};