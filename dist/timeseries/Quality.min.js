import{QualityStringRenderer}from"./QualityStringRenderer.js";class DataSetTxQualityFlagException extends Error{constructor(t){super(t),Object.setPrototypeOf(this,DataSetTxQualityFlagException.prototype)}}class DataFormatException extends Error{constructor(t=""){super("string"==typeof t?t:t.message),Object.setPrototypeOf(this,DataFormatException.prototype)}}class Quality{constructor(t){if(this._elementDataCompressed=null,this._isCompressed=!1,t instanceof Int32Array){const i=t;this._size=i.length/Quality.ELEMENT_SIZE_IN_BYTES,this._sizeInBytes=this._size*Quality.ELEMENT_SIZE_IN_BYTES,this._elementData=new Int32Array(this._sizeInBytes),this._elementData.set(i);for(let t=0;t<this._size;++t)this.setElementAt(this.getElementAt(t),t)}else if(t instanceof Quality){const i=t;this._size=i._size,this._sizeInBytes=i._sizeInBytes,this._elementData=new Int32Array(this._sizeInBytes),this._elementData.set(i._elementData);for(let t=0;t<this._size;++t)this.setElementAt(this.getElementAt(t),t)}else if(Array.isArray(t)){const i=t;this._size=i.length,this._sizeInBytes=this._size*Quality.ELEMENT_SIZE_IN_BYTES,this._elementData=new Int32Array(this._sizeInBytes);for(let t=0;t<this._size;t++)this.setIntegerAt(i[t],t)}else{const i=t;this._size=i,this._sizeInBytes=i*Quality.ELEMENT_SIZE_IN_BYTES,this._elementData=new Int32Array(this._sizeInBytes);for(let t=0;t<this._sizeInBytes;t++)this._elementData[t]=Quality.NULL_VALUE}}static cleanQualityInteger(t){let i=t;if(0==(i&Quality.SCREENED_VALUE))i=0;else{i&=Quality.USED_BITS_MASK,0!=(i&Quality.MISSING_VALUE)?i&=Quality.MISSING_MASK:0!=(i&Quality.REJECTED_VALUE)?i&=Quality.REJECTED_MASK:0!=(i&Quality.QUESTIONED_VALUE)?i&=Quality.QUESTIONED_MASK:0!=(i&Quality.OK_VALUE)&&(i&=Quality.OK_MASK);let t=(i&Quality.REPL_CAUSE_MASK)>>>Quality.REPL_CAUSE_SHIFT;t>4&&(t=4,i|=t<<Quality.REPL_CAUSE_SHIFT);let e=(i&Quality.REPL_METHOD_MASK)>>>Quality.REPL_METHOD_SHIFT;e>4&&(e=4,i|=e<<Quality.REPL_METHOD_SHIFT);let a=0!=(i&Quality.DIFFERENT_MASK);0==t?0==e&&a?(i&=Quality.NOT_DIFFERENT_MASK,a=!1):0==e||a||(i&=Quality.NO_REPL_METHOD_MASK,e=0):0!=e||a||(i&=Quality.NO_REPL_CAUSE_MASK,t=0),0!=t?0==e||a?a&&0==e&&(e=2,i|=e<<Quality.REPL_METHOD_SHIFT):(i|=Quality.DIFFERENT_MASK,a=!0):a&&0!=e&&(t=3,i&=t<<Quality.REPL_CAUSE_SHIFT)}return i}static emptyQualityValue(){return Quality.NULL_VALUE}static emptyBytes(){return new Int32Array([Quality.NULL_VALUE,Quality.NULL_VALUE,Quality.NULL_VALUE,Quality.NULL_VALUE])}getQuality(){return this._elementData}getSize(){return this._size}getSizeInBytes(){return this._sizeInBytes}hasQuality(){return this._size>0}getElementAt(t){if(t>this._size||t<0)throw new RangeError(`Index of: ${t} Out of range[0 - ${this._size}]`);const i=t*Quality.ELEMENT_SIZE_IN_BYTES,e=new Int32Array(Quality.ELEMENT_SIZE_IN_BYTES);return e.set(this._elementData.subarray(i,i+Quality.ELEMENT_SIZE_IN_BYTES)),e}getIntegerAt(t){const i=this.getElementAt(t),e=i[0]&Quality.MASK_BYTE,a=i[1]&Quality.MASK_BYTE,l=i[2]&Quality.MASK_BYTE;return i[3]&Quality.MASK_BYTE|l<<8|a<<16|e<<24}static getInteger(t){const i=t[0]&Quality.MASK_BYTE,e=t[1]&Quality.MASK_BYTE,a=t[2]&Quality.MASK_BYTE;return t[3]&Quality.MASK_BYTE|a<<8|e<<16|i<<24}setIntegerAt(t,i){const e=new Int32Array(4);e[3]=t&Quality.MASK_BYTE,e[2]=t>>8&Quality.MASK_BYTE,e[1]=t>>16&Quality.MASK_BYTE,e[0]=t>>24&Quality.MASK_BYTE,this.setElementAt(e,i)}static getBytes(t,i){if(!i){let i=new Int32Array(4);return Quality.getBytes(t,i),i}if(4!==i.length)throw new Error("<ERROR> QualityTx.getBytes(int,byte[]) : Byte array must be of size 4 before passed to this method");i[3]=t&Quality.MASK_BYTE,i[2]=t>>8&Quality.MASK_BYTE,i[1]=t>>16&Quality.MASK_BYTE,i[0]=t>>24&Quality.MASK_BYTE}setElementAt(t,i){if(i>this._size||i<0)throw new Error(`Index of: ${i} Out of range[0 - ${this._size}]`);const e=(t[0]&Quality.MASK_BYTE)<<24|(t[1]&Quality.MASK_BYTE)<<16|(t[2]&Quality.MASK_BYTE)<<8|t[3]&Quality.MASK_BYTE,a=Quality.cleanQualityInteger(e),l=new Int32Array([a>>>24&Quality.MASK_BYTE,a>>>16&Quality.MASK_BYTE,a>>>8&Quality.MASK_BYTE,a&Quality.MASK_BYTE]),u=i*Quality.ELEMENT_SIZE_IN_BYTES;for(let t=0;t<Quality.ELEMENT_SIZE_IN_BYTES;t++)this._elementData[u+t]=l[t]}static isAccepted(t){return Quality.isBitSet(t,Quality.SCREENED_BIT)&&Quality.isBitSet(t,Quality.OKAY_BIT)&&Quality.isBitClear(t,Quality.MISSING_BIT)&&Quality.isBitClear(t,Quality.QUESTION_BIT)&&Quality.isBitClear(t,Quality.REJECT_BIT)&&Quality.isBitClear(t,Quality.HOW_REVISED_BIT0)&&Quality.isBitClear(t,Quality.HOW_REVISED_BIT1)&&Quality.isBitSet(t,Quality.HOW_REVISED_BIT2)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT0)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT1)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT2)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT3)}static isAccepted_int(t){return Quality.isBitSet_int(t,Quality.SCREENED_BIT)&&Quality.isBitSet_int(t,Quality.OKAY_BIT)&&Quality.isBitClear_int(t,Quality.MISSING_BIT)&&Quality.isBitClear_int(t,Quality.QUESTION_BIT)&&Quality.isBitClear_int(t,Quality.REJECT_BIT)&&Quality.isBitClear_int(t,Quality.HOW_REVISED_BIT0)&&Quality.isBitClear_int(t,Quality.HOW_REVISED_BIT1)&&Quality.isBitSet_int(t,Quality.HOW_REVISED_BIT2)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT0)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT1)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT2)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT3)}static isInterpolated(t){return Quality.isBitSet(t,Quality.REPLACE_METHOD_BIT0)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT1)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT2)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT3)}static isInterpolated_int(t){return Quality.isBitSet_int(t,Quality.REPLACE_METHOD_BIT0)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT1)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT2)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT3)}static isKeyboardInput(t){return Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT0)&&Quality.isBitSet(t,Quality.REPLACE_METHOD_BIT1)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT2)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT3)}static isKeyboardInput_int(t){return Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT0)&&Quality.isBitSet_int(t,Quality.REPLACE_METHOD_BIT1)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT2)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT3)}static isGraphicalEstimate(t){return Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT0)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT1)&&Quality.isBitSet(t,Quality.REPLACE_METHOD_BIT2)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT3)}static isGraphicalEstimate_int(t){return Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT0)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT1)&&Quality.isBitSet_int(t,Quality.REPLACE_METHOD_BIT2)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT3)}isMissing(t){if(!this.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isMissing> Element not screened: "+t);return this.isBitSet(t,Quality.MISSING_BIT)}isNotMissing(t){return Quality.isBitClear_int(t,Quality.MISSING_BIT)}clearMissing(t){Quality.clearBit_int(t,Quality.MISSING_BIT),Quality.setBit_int(t,Quality.SCREENED_BIT)}setMissing(t){Quality.setBit_int(t,Quality.MISSING_BIT),Quality.clearBit_int(t,Quality.OKAY_BIT),Quality.clearBit_int(t,Quality.QUESTION_BIT),Quality.clearBit_int(t,Quality.REJECT_BIT),Quality.setBit_int(t,Quality.SCREENED_BIT)}static isMissing(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isMissing> Element not screened: "+t);return Quality.isBitSet(t,Quality.MISSING_BIT)}static isMissing_int(t){return Quality.isBitSet_int(t,Quality.SCREENED_BIT)&&Quality.isBitSet_int(t,Quality.MISSING_BIT)}static isNotMissing(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotMissing> Element not screened: "+t);return!Quality.isMissing(t)}static isNotMissing_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotMissing_int> Element not screened: "+t);return!Quality.isMissing_int(t)}static clearMissing(t){const i=Quality.clearBit(t,Quality.MISSING_BIT);return Quality.setBit(i,Quality.SCREENED_BIT)}static clearMissing_int(t){return Quality.setBit_int(Quality.clearBit_int(t,Quality.MISSING_BIT),Quality.SCREENED_BIT)}static setMissing(t){let i=Quality.setBit(t,Quality.MISSING_BIT);return i=Quality.clearBit(i,Quality.OKAY_BIT),i=Quality.clearBit(i,Quality.QUESTION_BIT),i=Quality.clearBit(i,Quality.REJECT_BIT),Quality.setBit(i,Quality.SCREENED_BIT)}static setMissing_int(t){let i=Quality.setBit_int(t,Quality.MISSING_BIT);return i=Quality.clearBit_int(i,Quality.OKAY_BIT),i=Quality.clearBit_int(i,Quality.QUESTION_BIT),i=Quality.clearBit_int(i,Quality.REJECT_BIT),Quality.setBit_int(i,Quality.SCREENED_BIT)}isProtected(t){return Quality.isScreened_int(t)&&Quality.isBitSet_int(t,Quality.PROTECTED_BIT)}isNotProtected(t){return!Quality.isProtected_int(t)}clearProtected(t){Quality.clearBit_int(t,Quality.PROTECTED_BIT),Quality.setBit_int(t,Quality.SCREENED_BIT)}setProtected(t){Quality.setBit_int(t,Quality.PROTECTED_BIT),Quality.setBit_int(t,Quality.SCREENED_BIT)}static isProtected(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isProtected> Element not screened: "+t);return Quality.isBitSet(t,Quality.PROTECTED_BIT)}static isProtected_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isProtected_int> Element not screened: "+t);return Quality.isBitSet_int(t,Quality.PROTECTED_BIT)}static isNotProtected(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotProtected> Element not screened: "+t);return!Quality.isProtected(t)}static isNotProtected_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotProtected_int> Element not screened: "+t);return!Quality.isProtected_int(t)}static clearProtected(t){const i=Quality.clearBit(t,Quality.PROTECTED_BIT);return Quality.setBit(i,Quality.SCREENED_BIT)}static clearProtected_int(t){return Quality.setBit_int(Quality.clearBit_int(t,Quality.PROTECTED_BIT),Quality.SCREENED_BIT)}static setProtected(t){return Quality.setBit(Quality.setBit(t,Quality.PROTECTED_BIT),Quality.SCREENED_BIT)}static setProtected_int(t){return Quality.setBit_int(Quality.setBit_int(t,Quality.PROTECTED_BIT),Quality.SCREENED_BIT)}static isBitClear(t,i){return!Quality.isBitSet(t,i)}static isQualityClear(t){return 0==Quality.getInteger(t)}static isQualityClear_int(t){return 0==t}static isBitSet_int(t,i){return 0!=(t&1<<i-1)}static isBitClear_int(t,i){return 0==(t&1<<i-1)}static setBit_int(t,i){return t|1<<i-1}static clearBit_int(t,i){return t&~(1<<i-1)}isBitSet(t,i){if(t>this._size||t<0)throw new RangeError("Index of: "+t+" Out of range[0 - "+this._size+"]");const e=this.getElementAt(t);return Quality.isBitSet(e,i)}static isBitSet(t,i){const e=(i-1)%8;return 0!=(t[Math.floor((32-i)/8)]&Quality.MASK[e])}isBitClear(t,i){return!this.isBitSet(t,i)}isQualityClear(t){return 0==this.getIntegerAt(t)}setBit(t,i){if(t>this._size||t<0)throw new RangeError("Index of: "+t+" Out of range[0 - "+this._size);let e=this.getElementAt(t);e=Quality.setBit(e,i),this.setElementAt(e,t)}static setBit(t,i){const e=Math.floor((32-i)/8),a=t[e],l=(i-1)%8;return t[e]=a|Quality.MASK[l],t}clearBit(t,i){if(t>this._size||t<0)throw new RangeError("Index of: "+t+" Out of range[0 - "+this._size);let e=this.getElementAt(t);e=Quality.clearBit(e,i),this.setElementAt(e,t)}static clearBit(t,i){const e=Math.floor((32-i)/8),a=t[e],l=(i-1)%8;return 0!=(a&Quality.MASK[l])&&(t[e]=a^Quality.MASK[l]),t}isScreened(t){return this.isBitSet(t,Quality.SCREENED_BIT)}isNotScreened(t){return this.isBitClear(t,Quality.SCREENED_BIT)}clearQuality(t){let i=this.getElementAt(t),e=i.length;if(e>0){const a=0&Quality.MASK_BYTE;for(let t=0;t<e;t++)i[t]=a;this.setElementAt(i,t)}}clearScreened(t){this.clearBit(t,Quality.SCREENED_BIT)}setScreened(t){this.setBit(t,Quality.SCREENED_BIT)}static isScreened(t){return Quality.isBitSet(t,Quality.SCREENED_BIT)}static isScreened_int(t){return Quality.isBitSet_int(t,Quality.SCREENED_BIT)}static isNotScreened(t){return Quality.isBitClear(t,Quality.SCREENED_BIT)}static isNotScreened_int(t){return Quality.isBitClear_int(t,Quality.SCREENED_BIT)}static clearQuality(t){if(null===t)return null;const i=t.length,e=new Int32Array(i);if(i>0){const t=0&Quality.MASK_BYTE;for(let a=0;a<i;a++)e[a]=t}return e}static clearQuality_int(t){if("number"==typeof t)return 0;if(null===t)return null;for(let i=0;i<t.length;++i)t[i]=0;return t}static clearScreened(t){return Quality.clearBit(t,Quality.SCREENED_BIT)}static clearScreened_int(t){return this.clearBit_int(t,Quality.SCREENED_BIT)}static setScreened(t){return Quality.setBit(t,Quality.SCREENED_BIT)}static setScreened_int(t){return Quality.setBit_int(t,Quality.SCREENED_BIT)}isQuestion(t){return this.isScreened(t)&&this.isBitSet(t,Quality.QUESTION_BIT)}isNotQuestion(t){return!this.isQuestion(t)}clearQuestion(t){this.clearBit(t,Quality.QUESTION_BIT),this.setBit(t,Quality.SCREENED_BIT)}setQuestion(t){this.setBit(t,Quality.QUESTION_BIT),this.clearBit(t,Quality.OKAY_BIT),this.clearBit(t,Quality.REJECT_BIT),this.clearBit(t,Quality.MISSING_BIT),this.setBit(t,Quality.SCREENED_BIT)}static isQuestion(t){return this.isScreened(t)&&this.isBitSet(t,Quality.QUESTION_BIT)}static isQuestion_int(t){return Quality.isBitSet_int(t,Quality.SCREENED_BIT)&&Quality.isBitSet_int(t,Quality.QUESTION_BIT)}static isNotQuestion(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotQuestion> Element not screened: "+t);return!Quality.isQuestion(t)}static isNotQuestion_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotQuestion_int> Element not screened: "+t);return!Quality.isQuestion_int(t)}static clearQuestion(t){let i=Quality.clearBit(t,Quality.QUESTION_BIT);return Quality.setBit(i,Quality.SCREENED_BIT)}static clearQuestion_int(t){return this.setBit_int(this.clearBit_int(t,Quality.QUESTION_BIT),Quality.SCREENED_BIT)}static setQuestion(t){let i=this.setBit(t,Quality.QUESTION_BIT);return i=this.clearBit(i,Quality.OKAY_BIT),i=this.clearBit(i,Quality.MISSING_BIT),i=this.clearBit(i,Quality.REJECT_BIT),this.setBit(i,Quality.SCREENED_BIT)}static setQuestion_int(t){let i=this.setBit_int(t,Quality.QUESTION_BIT);return i=this.clearBit_int(i,Quality.OKAY_BIT),i=this.clearBit_int(i,Quality.MISSING_BIT),i=this.clearBit_int(i,Quality.REJECT_BIT),this.setBit_int(i,Quality.SCREENED_BIT)}isReject(t){return this.isScreened(t)&&this.isBitSet(t,Quality.REJECT_BIT)}isNotReject(t){return!this.isReject(t)}clearReject(t){this.clearBit(t,Quality.REJECT_BIT),this.setBit(t,Quality.SCREENED_BIT)}setReject(t){this.setBit(t,Quality.REJECT_BIT),this.clearBit(t,Quality.OKAY_BIT),this.clearBit(t,Quality.QUESTION_BIT),this.clearBit(t,Quality.MISSING_BIT),this.setBit(t,Quality.SCREENED_BIT)}clearRange(t){this.clearBit(t,Quality.RANGE_OF_VALUE_BIT0),this.clearBit(t,Quality.RANGE_OF_VALUE_BIT1)}setRange0(t){this.clearBit(t,Quality.RANGE_OF_VALUE_BIT0),this.clearBit(t,Quality.RANGE_OF_VALUE_BIT1)}setRange1(t){this.setBit(t,Quality.RANGE_OF_VALUE_BIT0),this.clearBit(t,Quality.RANGE_OF_VALUE_BIT1)}setRange2(t){this.clearBit(t,Quality.RANGE_OF_VALUE_BIT0),this.setBit(t,Quality.RANGE_OF_VALUE_BIT1)}setRange3(t){this.setBit(t,Quality.RANGE_OF_VALUE_BIT0),this.setBit(t,Quality.RANGE_OF_VALUE_BIT1)}isDifferentValue(t){return this.isBitSet(t,Quality.VALUE_DIFFERS_BIT)}isNotDifferentValue(t){return!this.isDifferentValue(t)}clearDifferentValue(t){this.clearBit(t,Quality.VALUE_DIFFERS_BIT)}setDifferentValue(t){this.setBit(t,Quality.VALUE_DIFFERS_BIT)}isRevised(t){if(!this.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isRevised> Attempted to determine if a value was revised when the screened bit was not set. Index: "+t);return this.isDifferentValue(t)||this.isBitSet(t,Quality.HOW_REVISED_BIT0)&&this.isBitSet(t,Quality.HOW_REVISED_BIT1)&&!this.isBitSet(t,Quality.HOW_REVISED_BIT2)||this.isBitSet(t,Quality.REPLACE_METHOD_BIT0)||this.isBitSet(t,Quality.REPLACE_METHOD_BIT1)||this.isBitSet(t,Quality.REPLACE_METHOD_BIT2)||this.isBitSet(t,Quality.REPLACE_METHOD_BIT3)}isNotRevised(t){return!this.isRevised(t)}clearHowRevised(t){this.clearBit(t,Quality.HOW_REVISED_BIT0),this.clearBit(t,Quality.HOW_REVISED_BIT1),this.clearBit(t,Quality.HOW_REVISED_BIT2)}clearReplaceMethod(t){this.clearBit(t,Quality.REPLACE_METHOD_BIT0),this.clearBit(t,Quality.REPLACE_METHOD_BIT1),this.clearBit(t,Quality.REPLACE_METHOD_BIT2),this.clearBit(t,Quality.REPLACE_METHOD_BIT3)}setRevisedNoRevision(t){this.clearHowRevised(t)}setReplaceNoRevision(t){this.clearReplaceMethod(t)}setNoRevision(t){this.setRevisedNoRevision(t),this.setReplaceNoRevision(t)}setRevisedAutomatically(t){this.setOkay(t),this.setDifferentValue(t),this.setBit(t,Quality.HOW_REVISED_BIT0),this.clearBit(t,Quality.HOW_REVISED_BIT1),this.clearBit(t,Quality.HOW_REVISED_BIT2)}static isRevisedInteractivelyCheckAllBits(t){return Quality.isBitSet(t,Quality.SCREENED_BIT)&&Quality.isBitSet(t,Quality.OKAY_BIT)&&Quality.isBitClear(t,Quality.MISSING_BIT)&&Quality.isBitClear(t,Quality.QUESTION_BIT)&&Quality.isBitClear(t,Quality.REJECT_BIT)&&Quality.isBitSet(t,Quality.VALUE_DIFFERS_BIT)&&Quality.isRevisedInteractively(t)}static isRevisedInteractivelyCheckAllBits_int(t){return Quality.isBitSet_int(t,Quality.SCREENED_BIT)&&Quality.isBitSet_int(t,Quality.OKAY_BIT)&&Quality.isBitClear_int(t,Quality.MISSING_BIT)&&Quality.isBitClear_int(t,Quality.QUESTION_BIT)&&Quality.isBitClear_int(t,Quality.REJECT_BIT)&&Quality.isBitSet_int(t,Quality.VALUE_DIFFERS_BIT)&&Quality.isRevisedInteractively_int(t)}static isRevisedInteractively(t){return Quality.isBitClear(t,Quality.HOW_REVISED_BIT0)&&Quality.isBitSet(t,Quality.HOW_REVISED_BIT1)&&Quality.isBitClear(t,Quality.HOW_REVISED_BIT2)}static isRevisedInteractively_int(t){return Quality.isBitClear_int(t,Quality.HOW_REVISED_BIT0)&&Quality.isBitSet_int(t,Quality.HOW_REVISED_BIT1)&&Quality.isBitClear_int(t,Quality.HOW_REVISED_BIT2)}setRevisedInteractively(t){this.setOkay(t),this.setDifferentValue(t),this.clearBit(t,Quality.HOW_REVISED_BIT0),this.setBit(t,Quality.HOW_REVISED_BIT1),this.clearBit(t,Quality.HOW_REVISED_BIT2)}setRevisedManually(t){this.setOkay(t),this.setDifferentValue(t),this.setBit(t,Quality.HOW_REVISED_BIT0),this.setBit(t,Quality.HOW_REVISED_BIT1),this.clearBit(t,Quality.HOW_REVISED_BIT2)}setRevisedToOriginalAccepted(t){this.setOkay(t),this.clearBit(t,Quality.HOW_REVISED_BIT0),this.clearBit(t,Quality.HOW_REVISED_BIT1),this.setBit(t,Quality.HOW_REVISED_BIT2),this.clearReplaceMethod(t)}setReplaceLinearInterpolation(t){this.setOkay(t),this.setDifferentValue(t),this.setBit(t,Quality.REPLACE_METHOD_BIT0),this.clearBit(t,Quality.REPLACE_METHOD_BIT1),this.clearBit(t,Quality.REPLACE_METHOD_BIT2),this.clearBit(t,Quality.REPLACE_METHOD_BIT3)}setReplaceManualChange(t){this.setOkay(t),this.setDifferentValue(t),this.clearBit(t,Quality.REPLACE_METHOD_BIT0),this.setBit(t,Quality.REPLACE_METHOD_BIT1),this.clearBit(t,Quality.REPLACE_METHOD_BIT2),this.clearBit(t,Quality.REPLACE_METHOD_BIT3)}setReplaceGraphicalChange(t){this.setOkay(t),this.setDifferentValue(t),this.clearBit(t,Quality.REPLACE_METHOD_BIT0),this.clearBit(t,Quality.REPLACE_METHOD_BIT1),this.setBit(t,Quality.REPLACE_METHOD_BIT2),this.clearBit(t,Quality.REPLACE_METHOD_BIT3)}setReplaceWithMissing(t){this.setMissing(t),this.setDifferentValue(t),this.setBit(t,Quality.REPLACE_METHOD_BIT0),this.setBit(t,Quality.REPLACE_METHOD_BIT1),this.clearBit(t,Quality.REPLACE_METHOD_BIT2),this.clearBit(t,Quality.REPLACE_METHOD_BIT3)}static isReject(t){return Quality.isScreened(t)&&Quality.isBitSet(t,Quality.REJECT_BIT)}static isReject_int(t){return Quality.isBitSet_int(t,Quality.SCREENED_BIT)&&Quality.isBitSet_int(t,Quality.REJECT_BIT)}static isNotReject(t){return!Quality.isReject(t)}static isNotReject_int(t){if(!this.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotReject_int> Element not screened: "+t);return!Quality.isReject_int(t)}static clearReject(t){let i=Quality.clearBit(t,Quality.REJECT_BIT);return Quality.setBit(i,Quality.SCREENED_BIT)}static clearReject_int(t){return Quality.setBit_int(Quality.clearBit_int(t,Quality.REJECT_BIT),Quality.SCREENED_BIT)}static setReject(t){let i=Quality.setBit(t,Quality.REJECT_BIT);return i=Quality.clearBit(i,Quality.OKAY_BIT),i=Quality.clearBit(i,Quality.QUESTION_BIT),i=Quality.clearBit(i,Quality.MISSING_BIT),Quality.setBit(i,Quality.SCREENED_BIT)}static setReject_int(t){let i=Quality.setBit_int(t,Quality.REJECT_BIT);return i=Quality.clearBit_int(i,Quality.OKAY_BIT),i=Quality.clearBit_int(i,Quality.QUESTION_BIT),i=Quality.clearBit_int(i,Quality.MISSING_BIT),Quality.setBit_int(i,Quality.SCREENED_BIT)}static clearRange(t){const i=Quality.clearBit(t,Quality.RANGE_OF_VALUE_BIT0);return Quality.clearBit(i,Quality.RANGE_OF_VALUE_BIT1)}static clearRange_int(t){return Quality.clearBit_int(Quality.clearBit_int(t,Quality.RANGE_OF_VALUE_BIT0),Quality.RANGE_OF_VALUE_BIT1)}static setRange0(t){const i=Quality.clearBit(t,Quality.RANGE_OF_VALUE_BIT0);return Quality.clearBit(i,Quality.RANGE_OF_VALUE_BIT1)}static setRange0_int(t){return Quality.clearBit_int(Quality.clearBit_int(t,Quality.RANGE_OF_VALUE_BIT0),Quality.RANGE_OF_VALUE_BIT1)}static isRange1(t){return Quality.isBitSet(t,Quality.RANGE_OF_VALUE_BIT0)&&Quality.isBitClear(t,Quality.RANGE_OF_VALUE_BIT1)}static isRange1_int(t){return Quality.isBitSet_int(t,Quality.RANGE_OF_VALUE_BIT0)&&Quality.isBitClear_int(t,Quality.RANGE_OF_VALUE_BIT1)}static setRange1(t){const i=Quality.setBit(t,Quality.RANGE_OF_VALUE_BIT0);return Quality.clearBit(i,Quality.RANGE_OF_VALUE_BIT1)}static setRange1_int(t){return Quality.clearBit_int(Quality.setBit_int(t,Quality.RANGE_OF_VALUE_BIT0),Quality.RANGE_OF_VALUE_BIT1)}static isRange2(t){return Quality.isBitClear(t,Quality.RANGE_OF_VALUE_BIT0)&&Quality.isBitSet(t,Quality.RANGE_OF_VALUE_BIT1)}static isRange2_int(t){return Quality.isBitClear_int(t,Quality.RANGE_OF_VALUE_BIT0)&&Quality.isBitSet_int(t,Quality.RANGE_OF_VALUE_BIT1)}static setRange2(t){const i=Quality.clearBit(t,Quality.RANGE_OF_VALUE_BIT0);return Quality.setBit(i,Quality.RANGE_OF_VALUE_BIT1)}static setRange2_int(t){return Quality.setBit_int(Quality.clearBit_int(t,Quality.RANGE_OF_VALUE_BIT0),Quality.RANGE_OF_VALUE_BIT1)}static isRange3(t){return Quality.isBitSet(t,Quality.RANGE_OF_VALUE_BIT0)&&Quality.isBitSet(t,Quality.RANGE_OF_VALUE_BIT1)}static isRange3_int(t){return Quality.isBitSet_int(t,Quality.RANGE_OF_VALUE_BIT0)&&Quality.isBitSet_int(t,Quality.RANGE_OF_VALUE_BIT1)}static setRange3(t){const i=Quality.setBit(t,Quality.RANGE_OF_VALUE_BIT0);return Quality.setBit(i,Quality.RANGE_OF_VALUE_BIT1)}static setRange3_int(t){return Quality.setBit_int(Quality.setBit_int(t,Quality.RANGE_OF_VALUE_BIT0),Quality.RANGE_OF_VALUE_BIT1)}static isDifferentValue(t){return Quality.isBitSet(t,Quality.VALUE_DIFFERS_BIT)}static isDifferentValue_int(t){return Quality.isBitSet_int(t,Quality.VALUE_DIFFERS_BIT)}static isNotDifferentValue(t){return!Quality.isDifferentValue(t)}static isNotDifferentValue_int(t){return!Quality.isDifferentValue_int(t)}static clearDifferentValue(t){return Quality.clearBit(t,Quality.VALUE_DIFFERS_BIT)}static clearDifferentValue_int(t){return Quality.clearBit_int(t,Quality.VALUE_DIFFERS_BIT)}static setDifferentValue(t){return Quality.setBit(t,Quality.VALUE_DIFFERS_BIT)}static setDifferentValue_int(t){return Quality.setBit_int(t,Quality.VALUE_DIFFERS_BIT)}static isRevised(t){if(!this.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isRevised> Element not screened: "+t);return Quality.isDifferentValue(t)||Quality.isBitSet(t,Quality.HOW_REVISED_BIT0)&&Quality.isBitSet(t,Quality.HOW_REVISED_BIT1)&&!Quality.isBitSet(t,Quality.HOW_REVISED_BIT2)||Quality.isBitSet(t,Quality.REPLACE_METHOD_BIT0)||Quality.isBitSet(t,Quality.REPLACE_METHOD_BIT1)||Quality.isBitSet(t,Quality.REPLACE_METHOD_BIT2)||Quality.isBitSet(t,Quality.REPLACE_METHOD_BIT3)}static isRevised_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return Quality.isDifferentValue_int(t)||Quality.isBitSet_int(t,Quality.HOW_REVISED_BIT0)&&Quality.isBitSet_int(t,Quality.HOW_REVISED_BIT1)&&!Quality.isBitSet_int(t,Quality.HOW_REVISED_BIT2)||Quality.isBitSet_int(t,Quality.REPLACE_METHOD_BIT0)||Quality.isBitSet_int(t,Quality.REPLACE_METHOD_BIT1)||Quality.isBitSet_int(t,Quality.REPLACE_METHOD_BIT2)||Quality.isBitSet_int(t,Quality.REPLACE_METHOD_BIT3)}static isNotRevised(t){if(!this.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRevised> Element not screened: "+t);return!Quality.isRevised(t)}static isNotRevised_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRevised> Element not screened: "+t);return!Quality.isRevised_int(t)}static clearHowRevised(t){let i=Quality.clearBit(t,Quality.HOW_REVISED_BIT0);return i=Quality.clearBit(i,Quality.HOW_REVISED_BIT1),Quality.clearBit(i,Quality.HOW_REVISED_BIT2)}static clearHowRevised_int(t){let i=Quality.clearBit_int(t,Quality.HOW_REVISED_BIT0);return i=Quality.clearBit_int(i,Quality.HOW_REVISED_BIT1),Quality.clearBit_int(i,Quality.HOW_REVISED_BIT2)}static clearReplaceMethod(t){let i=Quality.clearBit(t,Quality.REPLACE_METHOD_BIT0);return i=Quality.clearBit(i,Quality.REPLACE_METHOD_BIT1),i=Quality.clearBit(i,Quality.REPLACE_METHOD_BIT2),Quality.clearBit(i,Quality.REPLACE_METHOD_BIT3)}static clearReplaceMethod_int(t){let i=Quality.clearBit_int(t,Quality.REPLACE_METHOD_BIT0);return i=Quality.clearBit_int(i,Quality.REPLACE_METHOD_BIT1),i=Quality.clearBit_int(i,Quality.REPLACE_METHOD_BIT2),Quality.clearBit_int(i,Quality.REPLACE_METHOD_BIT3)}static setReplaceNoRevision(t){return Quality.clearReplaceMethod(t)}static setReplaceNoRevision_int(t){return Quality.clearReplaceMethod_int(t)}static setNoRevision(t){const i=Quality.clearHowRevised(t);return Quality.clearReplaceMethod(i)}static setNoRevision_int(t){const i=Quality.clearHowRevised_int(t);return Quality.clearReplaceMethod_int(i)}static setRevisedAutomatically(t){Quality.setOkay(t),Quality.setDifferentValue(t);let i=Quality.setBit(t,Quality.HOW_REVISED_BIT0);return i=Quality.clearBit(i,Quality.HOW_REVISED_BIT1),Quality.clearBit(i,Quality.HOW_REVISED_BIT2)}static setRevisedAutomatically_int(t){let i=Quality.setOkay_int(t);return i=Quality.setDifferentValue_int(i),i=Quality.setBit_int(t,Quality.HOW_REVISED_BIT0),i=Quality.clearBit_int(i,Quality.HOW_REVISED_BIT1),Quality.clearBit_int(i,Quality.HOW_REVISED_BIT2)}static isRevisedAutomaticallyCheckAllBits(t){return Quality.isBitSet(t,Quality.SCREENED_BIT)&&Quality.isBitSet(t,Quality.OKAY_BIT)&&Quality.isBitClear(t,Quality.MISSING_BIT)&&Quality.isBitClear(t,Quality.QUESTION_BIT)&&Quality.isBitClear(t,Quality.REJECT_BIT)&&Quality.isBitSet(t,Quality.VALUE_DIFFERS_BIT)&&Quality.isRevisedAutomatically(t)}static isRevisedAutomaticallyCheckAllBits_int(t){return Quality.isBitSet_int(t,Quality.SCREENED_BIT)&&Quality.isBitSet_int(t,Quality.OKAY_BIT)&&Quality.isBitClear_int(t,Quality.MISSING_BIT)&&Quality.isBitClear_int(t,Quality.QUESTION_BIT)&&Quality.isBitClear_int(t,Quality.REJECT_BIT)&&Quality.isBitSet_int(t,Quality.VALUE_DIFFERS_BIT)&&Quality.isRevisedAutomatically_int(t)}static isRevisedAutomatically(t){return Quality.isBitSet(t,Quality.HOW_REVISED_BIT0)&&Quality.isBitClear(t,Quality.HOW_REVISED_BIT1)&&Quality.isBitClear(t,Quality.HOW_REVISED_BIT2)}static isRevisedAutomatically_int(t){return Quality.isBitSet_int(t,Quality.HOW_REVISED_BIT0)&&Quality.isBitClear_int(t,Quality.HOW_REVISED_BIT1)&&Quality.isBitClear_int(t,Quality.HOW_REVISED_BIT2)}static setRevisedInteractively(t){Quality.setOkay(t),Quality.setDifferentValue(t);let i=Quality.clearBit(t,Quality.HOW_REVISED_BIT0);return i=Quality.setBit(i,Quality.HOW_REVISED_BIT1),Quality.clearBit(i,Quality.HOW_REVISED_BIT2)}static setRevisedInteractively_int(t){let i=Quality.setOkay_int(t);return i=Quality.setDifferentValue_int(t),i=Quality.clearBit_int(t,Quality.HOW_REVISED_BIT0),i=Quality.setBit_int(i,Quality.HOW_REVISED_BIT1),Quality.clearBit_int(i,Quality.HOW_REVISED_BIT2)}static isRevisedManuallyCheckAllBits(t){return Quality.isBitSet(t,Quality.SCREENED_BIT)&&Quality.isBitSet(t,Quality.OKAY_BIT)&&Quality.isBitClear(t,Quality.MISSING_BIT)&&Quality.isBitClear(t,Quality.QUESTION_BIT)&&Quality.isBitClear(t,Quality.REJECT_BIT)&&Quality.isBitSet(t,Quality.VALUE_DIFFERS_BIT)&&Quality.isRevisedManually(t)}static isRevisedManually(t){return Quality.isBitSet(t,Quality.HOW_REVISED_BIT0)&&Quality.isBitSet(t,Quality.HOW_REVISED_BIT1)&&Quality.isBitClear(t,Quality.HOW_REVISED_BIT2)}static isRevisedManuallyCheckAllBits_int(t){return Quality.isBitSet_int(t,Quality.SCREENED_BIT)&&Quality.isBitSet_int(t,Quality.OKAY_BIT)&&Quality.isBitClear_int(t,Quality.MISSING_BIT)&&Quality.isBitClear_int(t,Quality.QUESTION_BIT)&&Quality.isBitClear_int(t,Quality.REJECT_BIT)&&Quality.isBitSet_int(t,Quality.VALUE_DIFFERS_BIT)&&Quality.isRevisedManually_int(t)}static isRevisedManually_int(t){return Quality.isBitSet_int(t,Quality.HOW_REVISED_BIT0)&&Quality.isBitSet_int(t,Quality.HOW_REVISED_BIT1)&&Quality.isBitClear_int(t,Quality.HOW_REVISED_BIT2)}static setRevisedManually(t){Quality.setOkay(t),Quality.setDifferentValue(t);let i=Quality.setBit(t,Quality.HOW_REVISED_BIT0);return i=Quality.setBit(i,Quality.HOW_REVISED_BIT1),Quality.clearBit(i,Quality.HOW_REVISED_BIT2)}static setRevisedManually_int(t){let i=Quality.setOkay_int(t);return i=Quality.setDifferentValue_int(t),i=Quality.setBit_int(t,Quality.HOW_REVISED_BIT0),i=Quality.setBit_int(i,Quality.HOW_REVISED_BIT1),Quality.clearBit_int(i,Quality.HOW_REVISED_BIT2)}setUsingQualityFlags(t,i,e,a){const l=Quality.getQualUsingFlags(t,e,a);this.setElementAt(l,i)}static getQualUsingFlags(t,i,e){const a=new Int32Array(4);return a.set(t.slice(0,4)),i.indexOf("A")>-1?(e&&Quality.setRevisedManually(a),Quality.isDifferentValue(a)||Quality.setRevisedToOriginalAccepted(a),Quality.setOkay(a)):i.indexOf("M")>-1?(e&&Quality.setRevisedManually(a),Quality.setMissing(a)):i.indexOf("Q")>-1?(e&&Quality.setRevisedManually(a),Quality.setQuestion(a)):i.indexOf("R")>-1&&(e&&Quality.setRevisedManually(a),Quality.setReject(a)),Quality.getQualUsingReviseReplaceFlags(a,i,e)}setUsingReviseReplaceFlags(t,i,e,a){const l=Quality.getQualUsingReviseReplaceFlags(t,e,a);this.setElementAt(l,i)}static getQualUsingReviseReplaceFlags(t,i,e){const a=new Int32Array(4);return a.set(t.slice(0,4)),i.indexOf("E")>-1?(Quality.setRevisedManually(a),Quality.setReplaceGraphicalChange(a)):i.indexOf("I")>-1?(Quality.setRevisedInteractively(a),Quality.setReplaceLinearInterpolation(a)):i.indexOf("K")>-1&&(Quality.setRevisedManually(a),Quality.setReplaceManualChange(a)),i.indexOf("P")>-1?Quality.setProtected(a):i.indexOf("U")>-1&&Quality.clearProtected(a),a}static setRevisedToOriginalAccepted(t){Quality.setOkay(t);let i=Quality.clearBit(t,Quality.HOW_REVISED_BIT0);return i=Quality.clearBit(i,Quality.HOW_REVISED_BIT1),i=Quality.setBit(i,Quality.HOW_REVISED_BIT2),Quality.setReplaceNoRevision(i)}static setRevisedToOriginalAccepted_int(t){let i=Quality.setOkay_int(t);return i=Quality.clearBit_int(t,Quality.HOW_REVISED_BIT0),i=Quality.clearBit_int(i,Quality.HOW_REVISED_BIT1),i=Quality.setBit_int(i,Quality.HOW_REVISED_BIT2),Quality.setReplaceNoRevision_int(i)}static isRevisedToOriginalAccepted(t){return Quality.isBitClear(t,Quality.HOW_REVISED_BIT0)&&Quality.isBitClear(t,Quality.HOW_REVISED_BIT1)&&Quality.isBitSet(t,Quality.HOW_REVISED_BIT2)}static isRevisedToOriginalAccepted_int(t){return Quality.isBitClear_int(t,Quality.HOW_REVISED_BIT0)&&Quality.isBitClear_int(t,Quality.HOW_REVISED_BIT1)&&Quality.isBitSet_int(t,Quality.HOW_REVISED_BIT2)}static isReplaceLinearInterpolation(t){return Quality.isBitSet(t,Quality.REPLACE_METHOD_BIT0)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT1)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT2)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT3)}static isReplaceLinearInterpolation_int(t){return Quality.isBitSet_int(t,Quality.REPLACE_METHOD_BIT0)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT1)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT2)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT3)}static setReplaceLinearInterpolation(t){Quality.setOkay(t),Quality.setDifferentValue(t);let i=Quality.setBit(t,Quality.REPLACE_METHOD_BIT0);return i=Quality.clearBit(i,Quality.REPLACE_METHOD_BIT1),i=Quality.clearBit(i,Quality.REPLACE_METHOD_BIT2),Quality.clearBit(i,Quality.REPLACE_METHOD_BIT3)}static setReplaceLinearInterpolation_int(t){let i=Quality.setOkay_int(t);return i=Quality.setDifferentValue_int(t),i=Quality.setBit_int(t,Quality.REPLACE_METHOD_BIT0),i=Quality.clearBit_int(i,Quality.REPLACE_METHOD_BIT1),i=Quality.clearBit_int(i,Quality.REPLACE_METHOD_BIT2),Quality.clearBit_int(i,Quality.REPLACE_METHOD_BIT3)}static isReplaceManualChange(t){return Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT0)&&Quality.isBitSet(t,Quality.REPLACE_METHOD_BIT1)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT2)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT3)}static isReplaceManualChange_int(t){return Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT0)&&Quality.isBitSet_int(t,Quality.REPLACE_METHOD_BIT1)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT2)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT3)}static setReplaceManualChange(t){Quality.setOkay(t),Quality.setDifferentValue(t);let i=Quality.clearBit(t,Quality.REPLACE_METHOD_BIT0);return i=Quality.setBit(i,Quality.REPLACE_METHOD_BIT1),i=Quality.clearBit(i,Quality.REPLACE_METHOD_BIT2),Quality.clearBit(i,Quality.REPLACE_METHOD_BIT3)}static setReplaceManualChange_int(t){let i=Quality.setOkay_int(t);return i=Quality.setDifferentValue_int(t),i=Quality.clearBit_int(t,Quality.REPLACE_METHOD_BIT0),i=Quality.setBit_int(i,Quality.REPLACE_METHOD_BIT1),i=Quality.clearBit_int(i,Quality.REPLACE_METHOD_BIT2),Quality.clearBit_int(i,Quality.REPLACE_METHOD_BIT3)}static isReplaceGraphicalChange(t){return Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT0)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT1)&&Quality.isBitSet(t,Quality.REPLACE_METHOD_BIT2)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT3)}static isReplaceGraphicalChange_int(t){return Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT0)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT1)&&Quality.isBitSet_int(t,Quality.REPLACE_METHOD_BIT2)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT3)}static setReplaceGraphicalChange(t){Quality.setOkay(t),Quality.setDifferentValue(t);let i=Quality.clearBit(t,Quality.REPLACE_METHOD_BIT0);return i=Quality.clearBit(i,Quality.REPLACE_METHOD_BIT1),i=Quality.setBit(i,Quality.REPLACE_METHOD_BIT2),Quality.clearBit(i,Quality.REPLACE_METHOD_BIT3)}static setReplaceGraphicalChange_int(t){let i=Quality.setOkay_int(t);return i=Quality.setDifferentValue_int(t),i=Quality.clearBit_int(t,Quality.REPLACE_METHOD_BIT0),i=Quality.clearBit_int(i,Quality.REPLACE_METHOD_BIT1),i=Quality.setBit_int(i,Quality.REPLACE_METHOD_BIT2),Quality.clearBit_int(i,Quality.REPLACE_METHOD_BIT3)}static isReplaceWithMissing(t){return Quality.isBitSet(t,Quality.REPLACE_METHOD_BIT0)&&Quality.isBitSet(t,Quality.REPLACE_METHOD_BIT1)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT2)&&Quality.isBitClear(t,Quality.REPLACE_METHOD_BIT3)}static isReplaceWithMissing_int(t){return Quality.isBitSet_int(t,Quality.REPLACE_METHOD_BIT0)&&Quality.isBitSet_int(t,Quality.REPLACE_METHOD_BIT1)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT2)&&Quality.isBitClear_int(t,Quality.REPLACE_METHOD_BIT3)}static setReplaceWithMissing(t){Quality.setMissing(t),Quality.setDifferentValue(t);let i=Quality.setBit(t,Quality.REPLACE_METHOD_BIT0);return i=Quality.setBit(i,Quality.REPLACE_METHOD_BIT1),i=Quality.clearBit(i,Quality.REPLACE_METHOD_BIT2),Quality.clearBit(i,Quality.REPLACE_METHOD_BIT3)}static setReplaceWithMissing_int(t){let i=Quality.setMissing_int(t);return i=Quality.setDifferentValue_int(t),i=Quality.setBit_int(t,Quality.REPLACE_METHOD_BIT0),i=Quality.setBit_int(i,Quality.REPLACE_METHOD_BIT1),i=Quality.clearBit_int(i,Quality.REPLACE_METHOD_BIT2),Quality.clearBit_int(i,Quality.REPLACE_METHOD_BIT3)}isOkay(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isOkay> Element not screened: "+t);return this.isBitSet(t,Quality.OKAY_BIT)}isNotOkay(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isOkay> Element not screened: "+t);return!this.isOkay(t)}clearOkay(t){this.clearBit(t,Quality.OKAY_BIT),this.setBit(t,Quality.SCREENED_BIT)}setOkay(t){this.setBit(t,Quality.OKAY_BIT),this.clearBit(t,Quality.REJECT_BIT),this.clearBit(t,Quality.QUESTION_BIT),this.clearBit(t,Quality.MISSING_BIT),this.setBit(t,Quality.SCREENED_BIT)}static isOkay(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isOkay> Element not screened: "+t);return Quality.isBitSet(t,Quality.OKAY_BIT)}static isOkay_int(t){return Quality.isBitSet_int(t,Quality.SCREENED_BIT)&&Quality.isBitSet_int(t,Quality.OKAY_BIT)}static isNotOkay(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotOkay> Element not screened: "+t);return!Quality.isOkay(t)}static isNotOkay_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotOkay> Element not screened: "+t);return!Quality.isOkay_int(t)}static clearOkay(t){const i=Quality.clearBit(t,Quality.OKAY_BIT);return Quality.setBit(i,Quality.SCREENED_BIT)}static clearOkay_int(t){return Quality.setBit_int(Quality.clearBit_int(t,Quality.OKAY_BIT),Quality.SCREENED_BIT)}static setOkay(t){let i=Quality.setBit(t,Quality.OKAY_BIT);return i=Quality.clearBit(i,Quality.MISSING_BIT),i=Quality.clearBit(i,Quality.QUESTION_BIT),i=Quality.clearBit(i,Quality.REJECT_BIT),Quality.setBit(i,Quality.SCREENED_BIT)}static setOkay_int(t){let i=Quality.setBit_int(t,Quality.OKAY_BIT);return i=Quality.clearBit_int(i,Quality.MISSING_BIT),i=Quality.clearBit_int(i,Quality.QUESTION_BIT),i=Quality.clearBit_int(i,Quality.REJECT_BIT),Quality.setBit_int(i,Quality.SCREENED_BIT)}static clearAllBits(t){for(let i=0;i<t.length;i++)t[i]=Quality.NULL_VALUE;return t}isAbsoluteMagnitude(t){return this.isBitSet(t,Quality.ABSOLUTEMAGNITUDE_BIT)}isNotAbsoluteMagnitude(t){return!this.isAbsoluteMagnitude(t)}clearAbsoluteMagnitude(t){this.clearBit(t,Quality.ABSOLUTEMAGNITUDE_BIT)}setAbsoluteMagnitude(t){this.setBit(t,Quality.ABSOLUTEMAGNITUDE_BIT)}static isAbsoluteMagnitude(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotOkay> Element not screened: "+t);return Quality.isBitSet(t,Quality.ABSOLUTEMAGNITUDE_BIT)}static isAbsoluteMagnitude_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotOkay> Element not screened: "+t);return Quality.isBitSet_int(t,Quality.ABSOLUTEMAGNITUDE_BIT)}static isNotAbsoluteMagnitude(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotOkay> Element not screened: "+t);return!Quality.isAbsoluteMagnitude(t)}static isNotAbsoluteMagnitude_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotOkay> Element not screened: "+t);return!Quality.isAbsoluteMagnitude_int(t)}static clearAbsoluteMagnitude(t){return Quality.clearBit(t,Quality.ABSOLUTEMAGNITUDE_BIT)}static clearAbsoluteMagnitude_int(t){return Quality.clearBit_int(t,Quality.ABSOLUTEMAGNITUDE_BIT)}static setAbsoluteMagnitude(t){return Quality.setBit(t,Quality.ABSOLUTEMAGNITUDE_BIT)}static setAbsoluteMagnitude_int(t){return Quality.setBit_int(t,Quality.ABSOLUTEMAGNITUDE_BIT)}isConstantValue(t){return this.isBitSet(t,Quality.CONSTANTVALUE_BIT)}isNotConstantValue(t){return!this.isConstantValue(t)}clearConstantValue(t){this.clearBit(t,Quality.CONSTANTVALUE_BIT)}setConstantValue(t){this.setBit(t,Quality.CONSTANTVALUE_BIT)}static isConstantValue(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotOkay> Element not screened: "+t);return Quality.isBitSet(t,Quality.CONSTANTVALUE_BIT)}static isConstantValue_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotOkay> Element not screened: "+t);return Quality.isBitSet_int(t,Quality.CONSTANTVALUE_BIT)}static isNotConstantValue(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotOkay> Element not screened: "+t);return!Quality.isConstantValue(t)}static isNotConstantValue_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotOkay> Element not screened: "+t);return!Quality.isConstantValue_int(t)}static clearConstantValue(t){return Quality.clearBit(t,Quality.CONSTANTVALUE_BIT)}static clearConstantValue_int(t){return Quality.clearBit_int(t,Quality.CONSTANTVALUE_BIT)}static setConstantValue(t){return Quality.setBit(t,Quality.CONSTANTVALUE_BIT)}static setConstantValue_int(t){return Quality.setBit_int(t,Quality.CONSTANTVALUE_BIT)}isRateOfChange(t){return this.isBitSet(t,Quality.RATEOFCHANGE_BIT)}isNotRateOfChange(t){return!this.isRateOfChange(t)}clearRateOfChange(t){this.clearBit(t,Quality.RATEOFCHANGE_BIT)}setRateOfChange(t){this.setBit(t,Quality.RATEOFCHANGE_BIT)}static isRateOfChange(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotOkay> Element not screened: "+t);return Quality.isBitSet(t,Quality.RATEOFCHANGE_BIT)}static isRateOfChange_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotOkay> Element not screened: "+t);return Quality.isBitSet_int(t,Quality.RATEOFCHANGE_BIT)}static isNotRateOfChange(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRateOfChange> Element not screened: "+t);return!Quality.isRateOfChange(t)}static isNotRateOfChange_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotOkay> Element not screened: "+t);return!Quality.isRateOfChange_int(t)}static clearRateOfChange(t){return Quality.clearBit(t,Quality.RATEOFCHANGE_BIT)}static clearRateOfChange_int(t){return Quality.clearBit_int(t,Quality.RATEOFCHANGE_BIT)}static setRateOfChange(t){return Quality.setBit(t,Quality.RATEOFCHANGE_BIT)}static setRateOfChange_int(t){return Quality.setBit_int(t,Quality.RATEOFCHANGE_BIT)}isRelativeMagnitude(t){return this.isBitSet(t,Quality.RELATIVEMAGNITUDE_BIT)}isNotRelativeMagnitude(t){return!this.isRelativeMagnitude(t)}clearRelativeMagnitude(t){this.clearBit(t,Quality.RELATIVEMAGNITUDE_BIT)}setRelativeMagnitude(t){this.setBit(t,Quality.RELATIVEMAGNITUDE_BIT)}static isRelativeMagnitude(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isRelativeMagnitude> Element not screened: "+t);return Quality.isBitSet(t,Quality.RELATIVEMAGNITUDE_BIT)}static isRelativeMagnitude_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isRelativeMagnitude> Element not screened: "+t);return Quality.isBitSet_int(t,Quality.RELATIVEMAGNITUDE_BIT)}static isNotRelativeMagnitude(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude> Element not screened: "+t);return!Quality.isRelativeMagnitude(t)}static isNotRelativeMagnitude_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return!Quality.isRelativeMagnitude_int(t)}static clearRelativeMagnitude(t){return Quality.clearBit(t,Quality.RELATIVEMAGNITUDE_BIT)}static clearRelativeMagnitude_int(t){return Quality.clearBit_int(t,Quality.RELATIVEMAGNITUDE_BIT)}static setRelativeMagnitude(t){return Quality.setBit(t,Quality.RELATIVEMAGNITUDE_BIT)}static setRelativeMagnitude_int(t){return Quality.setBit_int(t,Quality.RELATIVEMAGNITUDE_BIT)}isDurationMagnitude(t){return this.isBitSet(t,Quality.DURATIONMAGNITUDE_BIT)}isNotDurationMagnitude(t){return!this.isDurationMagnitude(t)}clearDurationMagnitude(t){this.clearBit(t,Quality.DURATIONMAGNITUDE_BIT)}setDurationMagnitude(t){this.setBit(t,Quality.DURATIONMAGNITUDE_BIT)}static isDurationMagnitude(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return Quality.isBitSet(t,Quality.DURATIONMAGNITUDE_BIT)}static isDurationMagnitude_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return Quality.isBitSet_int(t,Quality.DURATIONMAGNITUDE_BIT)}static isNotDurationMagnitude(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return!Quality.isDurationMagnitude(t)}static isNotDurationMagnitude_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return!Quality.isDurationMagnitude_int(t)}static clearDurationMagnitude(t){return Quality.clearBit(t,Quality.DURATIONMAGNITUDE_BIT)}static clearDurationMagnitude_int(t){return Quality.clearBit_int(t,Quality.DURATIONMAGNITUDE_BIT)}static setDurationMagnitude(t){return Quality.setBit(t,Quality.DURATIONMAGNITUDE_BIT)}static setDurationMagnitude_int(t){return Quality.setBit_int(t,Quality.DURATIONMAGNITUDE_BIT)}isNegativeIncremental(t){return this.isBitSet(t,Quality.NEGATIVEINCREMENTAL_BIT)}isNotNegativeIncremental(t){return!this.isNegativeIncremental(t)}clearNegativeIncremental(t){this.clearBit(t,Quality.NEGATIVEINCREMENTAL_BIT)}setNegativeIncremental(t){this.setBit(t,Quality.NEGATIVEINCREMENTAL_BIT)}static isNegativeIncremental(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return Quality.isBitSet(t,Quality.NEGATIVEINCREMENTAL_BIT)}static isNegativeIncremental_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return Quality.isBitSet_int(t,Quality.NEGATIVEINCREMENTAL_BIT)}static isNotNegativeIncremental(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return!Quality.isNegativeIncremental(t)}static isNotNegativeIncremental_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return!Quality.isNegativeIncremental_int(t)}static clearNegativeIncremental(t){return Quality.clearBit(t,Quality.NEGATIVEINCREMENTAL_BIT)}static clearNegativeIncremental_int(t){return Quality.clearBit_int(t,Quality.NEGATIVEINCREMENTAL_BIT)}static setNegativeIncremental(t){return Quality.setBit(t,Quality.NEGATIVEINCREMENTAL_BIT)}static setNegativeIncremental_int(t){return Quality.setBit_int(t,Quality.NEGATIVEINCREMENTAL_BIT)}isUserDefinedTest(t){return this.isBitSet(t,Quality.USER_DEFINED_TEST_BIT)}isNotUserDefinedTest(t){return!this.isUserDefinedTest(t)}clearUserDefinedTest(t){this.clearBit(t,Quality.USER_DEFINED_TEST_BIT)}setUserDefinedTest(t){this.setBit(t,Quality.USER_DEFINED_TEST_BIT)}static isUserDefinedTest(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return Quality.isBitSet(t,Quality.USER_DEFINED_TEST_BIT)}static isUserDefinedTest_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return Quality.isBitSet_int(t,Quality.USER_DEFINED_TEST_BIT)}static isNotUserDefinedTest(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return!Quality.isUserDefinedTest(t)}static isNotUserDefinedTest_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return!Quality.isUserDefinedTest_int(t)}static clearUserDefinedTest(t){return Quality.clearBit(t,Quality.USER_DEFINED_TEST_BIT)}static clearUserDefinedTest_int(t){return Quality.clearBit_int(t,Quality.USER_DEFINED_TEST_BIT)}static setUserDefinedTest(t){return Quality.setBit(t,Quality.USER_DEFINED_TEST_BIT)}static setUserDefinedTest_int(t){return Quality.setBit_int(t,Quality.USER_DEFINED_TEST_BIT)}isDistributionTest(t){return this.isBitSet(t,Quality.DISTRIBUTIONTEST_BIT)}isNotDistributionTest(t){return!this.isDistributionTest(t)}clearDistributionTest(t){this.clearBit(t,Quality.DISTRIBUTIONTEST_BIT)}setDistributionTest(t){this.setBit(t,Quality.DISTRIBUTIONTEST_BIT)}static isDistributionTest(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return Quality.isBitSet(t,Quality.DISTRIBUTIONTEST_BIT)}static isDistributionTest_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return Quality.isBitSet_int(t,Quality.DISTRIBUTIONTEST_BIT)}static isNotDistributionTest(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return!Quality.isDistributionTest(t)}static isNotDistributionTest_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return!Quality.isDistributionTest_int(t)}static clearDistributionTest(t){return Quality.clearBit(t,Quality.DISTRIBUTIONTEST_BIT)}static clearDistributionTest_int(t){return Quality.clearBit_int(t,Quality.DISTRIBUTIONTEST_BIT)}static setDistributionTest(t){return Quality.setBit(t,Quality.DISTRIBUTIONTEST_BIT)}static setDistributionTest_int(t){return Quality.setBit_int(t,Quality.DISTRIBUTIONTEST_BIT)}isGageList(t){return this.isBitSet(t,Quality.GAGELIST_BIT)}isNotGageList(t){return!this.isGageList(t)}clearGageList(t){this.clearBit(t,Quality.GAGELIST_BIT)}setGageList(t){this.setBit(t,Quality.GAGELIST_BIT)}static isGageList(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return this.isBitSet(t,Quality.GAGELIST_BIT)}static isGageList_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return Quality.isBitSet_int(t,Quality.GAGELIST_BIT)}static isNotGageList(t){if(!Quality.isBitSet(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return!Quality.isGageList(t)}static isNotGageList_int(t){if(!Quality.isBitSet_int(t,Quality.SCREENED_BIT))throw new DataSetTxQualityFlagException("Method: <isNotRelativeMagnitude_int> Element not screened: "+t);return!Quality.isGageList_int(t)}static clearGageList(t){return Quality.clearBit(t,Quality.GAGELIST_BIT)}static clearGageList_int(t){return Quality.clearBit_int(t,Quality.GAGELIST_BIT)}static setGageList(t){return Quality.setBit(t,Quality.GAGELIST_BIT)}static setGageList_int(t){return Quality.setBit_int(t,Quality.GAGELIST_BIT)}getIntQuality(){let t=[];for(let i=0;i<this._size;i++){const e=i*Quality.ELEMENT_SIZE_IN_BYTES,a=this._elementData[e+0]&Quality.MASK_BYTE,l=this._elementData[e+1]&Quality.MASK_BYTE,u=this._elementData[e+2]&Quality.MASK_BYTE,s=this._elementData[e+3]&Quality.MASK_BYTE;t.push(s|u<<8|l<<16|a<<24)}return t}static isEmpty(t){return 0==Quality.getInteger(t)}getQualitySymbols(t){return this.getDateQualityMap((t=>QualityStringRenderer.getSymbolicString(this.getIntegerAt(t))),t)}getQualityIntegers(t,i){if(i){const e=this.getZonedDateTimeQualityMap(this.getIntegerAt.bind(this),t,i),a=new Map;for(const[t,i]of e.entries())a.set(t,i);return a}return this.getDateQualityMap(this.getIntegerAt.bind(this),t)}getZonedDateTimeQualityMap(t,i,e){const a=new Map;for(let l=0;l<i.length;l++){const u=new Date(i[l]),s=new Date(u.toLocaleString("en-US",{timeZone:e}));a.set(s,t(l))}return a}getDateQualityMap(t,i){const e=new Map;for(let a=0;a<i.length;a++){const l=new Date(i[a]);e.set(l,t(a))}return e}toStringElement(t,i){return QualityStringRenderer.getString(this.getIntegerAt(t),i)}toBinaryString(){return this.toString(QualityStringRenderer.BINARY_STRING)}toOctalString(){return this.toString(QualityStringRenderer.OCTAL_STRING)}toSymbolicString(){return this.toString(QualityStringRenderer.SYMBOLIC_STRING)}toSymbolicRevisedString(){return this.toString(QualityStringRenderer.SYMBOLIC_REVISED_STRING)}toSymbolicTestsString(){return this.toString(QualityStringRenderer.SYMBOLIC_TESTS_STRING)}toHexString(){return QualityStringRenderer.HEX_STRING.toString()}toIntegerString(){return QualityStringRenderer.INTEGER_STRING.toString()}toIntegerStringElementAt(t){return this.getIntegerAt(t).toString()}toBinaryStringElementAt(t){return QualityStringRenderer.pad(this.getIntegerAt(t).toString(2),QualityStringRenderer.BINARY_STRING)}toOctalStringElementAt(t){return QualityStringRenderer.pad(this.getIntegerAt(t).toString(8),QualityStringRenderer.OCTAL_STRING)}toSymbolicStringElementAt(t){return this.toStringElement(t,QualityStringRenderer.SYMBOLIC_STRING)}toSymbolicTestsStringElementAt(t){return this.toStringElement(t,QualityStringRenderer.SYMBOLIC_TESTS_STRING)}toSymbolicRevisedStringElementAt(t){return this.toStringElement(t,QualityStringRenderer.SYMBOLIC_REVISED_STRING)}toHexStringElementAt(t){return QualityStringRenderer.pad(this.getIntegerAt(t).toString(16),QualityStringRenderer.HEX_STRING)}toString(t){if(void 0===t)return this.toString(QualityStringRenderer.HEX_STRING);let i="[";for(let e=0;e<this._size;e++)i+=this.toStringElement(e,t),e<this._size-1&&(i+=", ");return i+="]",i}}Quality.serialVersionUID=5287976742565108510n,Quality.QUALITY_FLAGS_EDITABLE="quality_flags_editable",Quality.SHOW_QUALITY_FLAGS="show_quality_flags",Quality.ELEMENT_SIZE_IN_BYTES=4,Quality.NULL_VALUE=0,Quality.SCREENED_BIT=1,Quality.OKAY_BIT=2,Quality.MISSING_BIT=3,Quality.QUESTION_BIT=4,Quality.REJECT_BIT=5,Quality.RANGE_OF_VALUE_BIT0=6,Quality.RANGE_OF_VALUE_BIT1=7,Quality.VALUE_DIFFERS_BIT=8,Quality.HOW_REVISED_BIT0=9,Quality.HOW_REVISED_BIT1=10,Quality.HOW_REVISED_BIT2=11,Quality.REPLACE_METHOD_BIT0=12,Quality.REPLACE_METHOD_BIT1=13,Quality.REPLACE_METHOD_BIT2=14,Quality.REPLACE_METHOD_BIT3=15,Quality.ABSOLUTEMAGNITUDE_BIT=16,Quality.CONSTANTVALUE_BIT=17,Quality.RATEOFCHANGE_BIT=18,Quality.RELATIVEMAGNITUDE_BIT=19,Quality.DURATIONMAGNITUDE_BIT=20,Quality.NEGATIVEINCREMENTAL_BIT=21,Quality.NOT_DEFINED_BIT0=22,Quality.GAGELIST_BIT=23,Quality.NOT_DEFINED_BIT1=24,Quality.USER_DEFINED_TEST_BIT=25,Quality.DISTRIBUTIONTEST_BIT=26,Quality.RESERVED_BIT0=27,Quality.RESERVED_BIT1=28,Quality.RESERVED_BIT2=29,Quality.RESERVED_BIT3=30,Quality.RESERVED_BIT4=31,Quality.PROTECTED_BIT=32,Quality.MASK=[1,2,4,8,16,32,64,128],Quality.MASK_BYTE=255,Quality.USED_BITS_MASK=-2090860545,Quality.SCREENED_VALUE=1,Quality.OK_VALUE=2,Quality.OK_MASK=-29,Quality.MISSING_VALUE=4,Quality.MISSING_MASK=-27,Quality.QUESTIONED_VALUE=8,Quality.QUESTIONED_MASK=-23,Quality.REJECTED_VALUE=16,Quality.REJECTED_MASK=-15,Quality.DIFFERENT_MASK=128,Quality.NOT_DIFFERENT_MASK=-129,Quality.REPL_CAUSE_MASK=1792,Quality.NO_REPL_CAUSE_MASK=-1793,Quality.REPL_METHOD_MASK=30720,Quality.NO_REPL_METHOD_MASK=-30721,Quality.REPL_METHOD_SHIFT=11,Quality.REPL_CAUSE_SHIFT=8,Qualityexport{Quality};