import QualityTx from"./index.min.mjs";import"./labels.js";import{saveSettings,loadSettings}from"./settings.js";import{bin2dec,dec2bin,$}from"./utils.js";const bitMapOptions={SCREENED_ID:["SCREENED","UNSCREENED"],VALIDITY_ID:["UNKNOWN","OKAY","MISSING","QUESTIONABLE","REJECTED"],RANGE_ID:["NO_RANGE","RANGE_1","RANGE_2","RANGE_3"],CHANGED_ID:["MODIFIED","ORIGINAL"],REPL_CAUSE_ID:["NONE","AUTOMATIC","INTERACTIVE","MANUAL","RESTORED"],REPL_METHOD_ID:["NONE","LIN_INTERP","EXPLICIT","MISSING","GRAPHICAL"],TEST_FAILED_ID:["ABSOLUTE_VALUE","CONSTANT_VALUE","RATE_OF_CHANGE","RELATIVE_VALUE","DURATION_VALUE","NEG_INCREMENT","SKIP_LIST","USER_DEFINED","DISTRIBUTION"],UNUSED:[],PROTECTION_ID:["PROTECTED","UNPROTECTED"]},CLEAR_BITS="00000000000000000000000000000000",qualityCodeInput=$("#qualityCode"),checkCodeElem=$("#checkCode"),qualityTableBodyElem=$("#qualityTable").querySelector("tbody"),createTableBodyElem=$("#createTable").querySelector("tbody"),clearCodeElem=$("#clearCode"),bitBinMapInput=$("#bitBinMap"),bitDecMapInput=$("#bitDecMap"),inputGroupSizingElem=$("#inputGroup-sizing-default"),inputBitCountElem=$("#inputBitCount");let screened_message_count=0;const qtx=new QualityTx;let settings=loadSettings();function clearTable(){qualityTableBodyElem.innerHTML=`<tr name="temp-msg"><td colspan="9" class="h5 text-center">Table Cleared - Enter an integer from ${qualityCodeInput.min} to ${qualityCodeInput.max}</td></tr>`}function addRow(t){document.getElementsByName("temp-msg").forEach((t=>t.remove()));const e=document.createElement("tr");e.innerHTML=`<td class="col">${t.QUALITY_CODE}</td>\n        <td>${t.SCREENED_ID}</td>\n        <td>${t.VALIDITY_ID}</td>\n        <td>${t.RANGE_ID}</td>\n        <td>${t.CHANGED_ID}</td>\n        <td>${t.REPL_CAUSE_ID}</td>\n        <td>${t.REPL_METHOD_ID}</td>\n        <td>${t.PROTECTION_ID}</td>\n        <td>${t.TEST_FAILED_ID}</td>`,qualityTableBodyElem.appendChild(e)}function isBitMapValid(t){t||(t=bitBinMapInput.value);let e="";if("0"==t.charAt(31))for(const n in t)"1"==n&&(e="RULE 1");"1"==t.charAt(17)&&(e="Rule 2, bit 14"),"1"==t.charAt(9)&&(e="Rule 2, bit 22"),"1"==t.charAt(7)&&(e="Rule 2, bit 24"),"1"==t.charAt(5)&&(e="Rule 2, bit 26"),"1"==t.charAt(4)&&(e="Rule 2, bit 27"),"1"==t.charAt(3)&&(e="Rule 2, bit 28"),"1"==t.charAt(2)&&(e="Rule 2, bit 29"),"1"==t.charAt(1)&&(e="Rule 2, bit 30");let n=0;console.log("bits",t);for(let e of t.slice(26,31))console.log(e),"1"==e&&(n+=1);return n>1&&(e="Rule 3"),("1"==t.charAt(23)&&"1"==t.charAt(21)||"1"==t.charAt(22)&&"1"==t.charAt(21))&&(e="Rule 5"),("1"==t.charAt(20)&&"1"==t.charAt(18)||"1"==t.charAt(9)&&"1"==t.charAt(18))&&(e="Rule 6"),!e||(alert(`You have invalid bits set with this value, per ${e}. Clearing bits.`),!1)}function onBinaryChange(t){if("Control"!=t.key&&!t.ctrlKey)return isBitMapValid()?void(["0","1","Backspace","Delete","ArrowLeft","ArrowRight","ArrowUp","ArrowDown"].includes(t.key)||(bitBinMapInput.classList.remove("border-dark"),bitBinMapInput.classList.add("border-warning"),inputGroupSizingElem.classList.add("bg-warning"),inputGroupSizingElem.innerText="Use 1 or 0",setTimeout((()=>{bitBinMapInput.classList.remove("border-warning"),bitBinMapInput.classList.add("border-dark"),inputGroupSizingElem.classList.remove("bg-warning"),inputGroupSizingElem.innerText="Bit Map"}),1e3),t.preventDefault())):(console.log("binary change"),resetBits(),void t.preventDefault())}function resetBits(){bitBinMapInput.value=CLEAR_BITS,bitDecMapInput.value=bin2dec(CLEAR_BITS),setCreateTabDropdowns(bitDecMapInput.value)}function setCreateTabDropdowns(t){let e=qtx.isScreened_int(t),n=qtx.getStringDescription(t,!0);delete n.QUALITY_CODE;for(const t in n){const i=document.getElementById(t),a=n[t];if(i.value=n[t],"SCREENED_ID"!=t&&(i.disabled=!e),i?.multiple)for(const t of a.split("+"))for(const e of i.options)e.innerText==t&&(e.selected=!0)}}function determineNewQuality(t,e){if(t.target.multiple){let n=Array.from(t.target.selectedOptions).map((({value:t})=>t));return e=qtx.clearAllTest_int(e),n.includes("ABSOLUTE_VALUE")&&(e=qtx.setAbsoluteMagnitude_int(e)),n.includes("CONSTANT_VALUE")&&(e=qtx.setConstantValue_int(e)),n.includes("RATE_OF_CHANGE")&&(e=qtx.setRateOfChange_int(e)),n.includes("RELATIVE_VALUE")&&(e=qtx.setRelativeMagnitude_int(e)),n.includes("DURATION_VALUE")&&(e=qtx.setDurationMagnitude_int(e)),n.includes("NEG_INCREMENT")&&(e=qtx.setNegativeIncremental_int(e)),n.includes("SKIP_LIST")&&(e=qtx.setGageList_int(e)),n.includes("USER_DEFINED")&&(e=qtx.setUserDefinedTest_int(e)),n.includes("DISTRIBUTION")&&(e=qtx.setDistributionTest_int(e)),e}switch(t.target.id){case"SCREENED_ID":return"SCREENED"==t.target.value?qtx.setScreened_int(e):qtx.clearBit_int(e);case"VALIDITY_ID":switch(t.target.value){case"REJECTED":return qtx.setReject_int(e);case"OKAY":return qtx.setOkay_int(e);case"MISSING":return qtx.setMissing_int(e);case"QUESTIONABLE":return qtx.setQuestion_int(e);case"UNKNOWN":return e=qtx.clearReject_int(e),e=qtx.clearOkay_int(e),e=qtx.clearMissing_int(e),qtx.clearQuestion_int(e)}case"RANGE_ID":switch(t.target.value){case"NO_RANGE":return qtx.clearRange_int(e);case"RANGE_0":return qtx.setRange0_int(e);case"RANGE_1":return qtx.setRange1_int(e);case"RANGE_2":return qtx.setRange2_int(e);case"RANGE_3":return qtx.setRange3_int(e)}case"CHANGED_ID":switch(t.target.value){case"ORIGINAL":return qtx.clearDifferentValue_int(e);case"MODIFIED":return qtx.setDifferentValue_int(e)}case"REPL_CAUSE_ID":switch(t.target.value){case"NONE":return qtx.clearAllRevised_int(e);case"AUTOMATIC":return qtx.setRevisedAutomatically_int(e);case"INTERACTIVE":return qtx.setRevisedInteractively_int(e);case"MANUAL":return qtx.setRevisedManually_int(e);case"RESTORED":return qtx.setRevisedToOriginalAccepted_int(e)}case"REPL_METHOD_ID":switch(t.target.value){case"NONE":return qtx.clearReplaceMethod_int(e);case"LIN_INTERP":return qtx.setReplaceLinearInterpolation_int(e);case"EXPLICIT":return qtx.setReplaceManualChange_int(e);case"MISSING":return qtx.setReplaceWithMissing_int(e);case"GRAPHICAL":return qtx.setReplaceGraphicalChange_int(e)}case"PROTECTION_ID":switch(t.target.value){case"UNPROTECTED":return qtx.clearProtected_int(e);case"PROTECTED":return qtx.setProtected_int(e)}}}checkCodeElem.addEventListener("click",(t=>{if(!qualityCodeInput.value)return void alert(`Enter a value from ${qualityCodeInput.min} to ${qualityCodeInput.max}`);if(!isBitMapValid(dec2bin(qualityCode.value)))return console.log("checkcode click"),void(qualityCode.value=0);let e=document.querySelectorAll("tr td:first-of-type");for(const t of e)if(t.innerText==qualityCodeInput.value)return alert(`Row Exists for Quality Code ${qualityCodeInput.value}`),void(qualityCodeInput.value="");addRow(qtx.getStringDescription(qualityCodeInput.value,!0))})),clearCodeElem.addEventListener("click",clearTable),addRow(qtx.getStringDescription(0,!0)),addRow(qtx.getStringDescription(1,!0)),addRow(qtx.getStringDescription(3,!0)),addRow(qtx.getStringDescription(5,!0)),addRow(qtx.getStringDescription(9,!0)),addRow(qtx.getStringDescription(Math.floor(Math.random()*qualityCodeInput.max),!0)),bitBinMapInput.addEventListener("keyup",onBinaryChange),bitBinMapInput.addEventListener("keyup",(()=>{if(inputBitCountElem.innerText=bitBinMapInput.value.length+" / 32",32==bitBinMapInput.value.length){let t=bin2dec(bitBinMapInput.value);bitDecMapInput.value=t,setCreateTabDropdowns(t),inputBitCountElem.classList.replace("border-danger","border-success")}else inputBitCountElem.classList.replace("border-success","border-danger")})),bitDecMapInput.addEventListener("keydown",(t=>{if(t.target.value)return isBitMapValid()?void setTimeout((()=>{parseInt(t.target.value)>parseInt(t.target.max)&&(t.target.value=t.target.max),parseInt(t.target.value)<parseInt(t.target.min)&&(t.target.value=t.target.min),bitBinMapInput.value=dec2bin(t.target.value),setCreateTabDropdowns(t.target.value)}),300):(console.log("decimal change"),t.preventDefault(),void resetBits())})),document.querySelectorAll('[role="tab"]').forEach((t=>{t.addEventListener("click",(t=>{settings.tab=t.target.id,saveSettings(settings)})),t.id==settings?.tab&&t.click()})),createTableBodyElem.querySelectorAll("tr").forEach((t=>{const e=document.createElement("select"),n=t.children[1].innerText;"TEST_FAILED_ID"==n&&(e.multiple=!0),e.innerHTML="",e.id=n,e.title="Hold Ctrl or Shift to select multiple",e.name="bit-map-select";let i="",a=bitMapOptions[n];if(0!=a.length){for(const t of a)i+=`<option>${t}</option>`;e.innerHTML=i,e.classList.add("w-100"),e.classList.add("text-center"),t.children[2].appendChild(e)}})),setCreateTabDropdowns(bin2dec(bitBinMapInput.value)),document.querySelectorAll('[name="bit-map-select"]').forEach((t=>{t.addEventListener("change",(t=>{let e=determineNewQuality(t,bin2dec(bitBinMapInput.value));null!==e&&(bitBinMapInput.value=dec2bin(e),bitDecMapInput.value=e,setCreateTabDropdowns(bitDecMapInput.value))}))}));