"use strict";export default class QualityTx{constructor(){this.name=this.constructor.name,this.elementData=new Int32Array(32),this.size=0,this.SCREENED_BIT=1,this.OKAY_BIT=2,this.MISSING_BIT=3,this.QUESTION_BIT=4,this.REJECT_BIT=5,this.RANGE_OF_VALUE_BIT0=6,this.RANGE_OF_VALUE_BIT1=7,this.VALUE_DIFFERS_BIT=8,this.HOW_REVISED_BIT0=9,this.HOW_REVISED_BIT1=10,this.HOW_REVISED_BIT2=11,this.REPLACE_METHOD_BIT0=12,this.REPLACE_METHOD_BIT1=13,this.REPLACE_METHOD_BIT2=14,this.REPLACE_METHOD_BIT3=15,this.ABSOLUTEMAGNITUDE_BIT=16,this.CONSTANTVALUE_BIT=17,this.RATEOFCHANGE_BIT=18,this.RELATIVEMAGNITUDE_BIT=19,this.DURATIONMAGNITUDE_BIT=20,this.NEGATIVEINCREMENTAL_BIT=21,this.NOT_DEFINED_BIT0=22,this.GAGELIST_BIT=23,this.NOT_DEFINED_BIT1=24,this.USER_DEFINED_TEST_BIT=25,this.DISTRIBUTIONTEST_BIT=26,this.RESERVED_BIT0=27,this.RESERVED_BIT1=28,this.RESERVED_BIT2=29,this.RESERVED_BIT3=30,this.RESERVED_BIT4=31,this.PROTECTED_BIT=32,this.MASK=[1,2,4,8,16,32,64,128],this}clearBit(t,i){const e=Math.floor((32-i)/8),s=t[e],n=(i-1)%8;return 0!==(s&this.MASK[n])&&(t[e]=s^this.MASK[n]),t}clearBit_int(t,i){return t&(1<<i-1^4294967295)}setBit(t,i){if("object"==typeof t){const t=(32-i)/8,e=bytes[t]|MASK[(i-1)%8];return bytes[t]=e,bytes}{if(t>this.size||t<0)throw new RangeError("Index of: "+t+" Out of range[0 - "+this.size);let e=getElementAt(t);e=this.setBit(e,i),setElementAt(e,t)}}setBit_int(t,i){return t|1<<i-1}isBitSet_int(t,i){return 0!=(t&1<<i-1)}isBitClear_int(t,i){return 0==(t&1<<i-1)}_getElementAt(t){if(t>this.size||t<0)throw new RangeError("Index of: "+t+" Out of range[0 - "+this.size);let i=4*t,e=new Uint8Array(4);for(let t=0;t<4;t++)e.push(this.elementData[i+t]);return e}_getIntegerAt(t){let i=getElementAt(t),e=255&i[0],s=255&i[1],n=255&i[2];return 255&i[3]|n<<8|s<<16|e<<24}_getInteger(t){let i=255&t[0],e=255&t[1],s=255&t[2];return 255&t[3]|s<<8|e<<16|i<<24}_isQualityClear(t){return 0==this._getInteger(t)}_isScreened(t){return this._isBitSet(t,1)}isScreened_int(t){return this.isBitSet_int(t,1)}_isNotScreened(t){return this._isBitClear(t,1)}_isBitClear(t,i){return!this._isBitSet(t,i)}_isBitSet(t,i){if("object"==typeof t){let e=(i-1)%8;return 0!=(t[Math.floor((32-i)/8)]&this.MASK[e])}{if(t>this.size||t<0)throw new RangeError("Index of: "+t+" Out of range[0 - "+this.size+"]");let e=this._getElementAt(t);return this._isBitSet(e,i)}}_isRange1(t){return!(!this._isBitSet(t,6)||!this._isBitClear(t,7))}_isRange2(t){return!(!this._isBitClear(t,6)||!this._isBitSet(t,7))}_isRange3(t){return!(!this._isBitSet(t,6)||!this._isBitSet(t,7))}_isDifferentValue(t){return this._isBitSet(t,8)}_isRevisedAutomatically(t){return!!(this._isBitSet(t,9)&&this._isBitClear(t,10)&&this._isBitClear(t,11))}_isRevisedInteractively(t){return!!(this._isBitClear(t,9)&&this._isBitSet(t,10)&&this._isBitClear(t,11))}_isRevisedManually(t){return!!(this._isBitSet(t,9)&&this._isBitSet(t,10)&&this._isBitClear(t,11))}_isRevisedToOriginalAccepted(t){return!!(this._isBitClear(t,9)&&this._isBitClear(t,10)&&this._isBitSet(t,11))}_isReplaceLinearInterpolation(t){return!!(this._isBitSet(t,12)&&this._isBitClear(t,13)&&this._isBitClear(t,14)&&this._isBitClear(t,15))}_isReplaceManualChange(t){return!!(this._isBitClear(t,12)&&this._isBitSet(t,13)&&this._isBitClear(t,14)&&this._isBitClear(t,15))}_isReplaceWithMissing(t){return!!(this._isBitSet(t,12)&&this._isBitSet(t,13)&&this._isBitClear(t,14)&&this._isBitClear(t,15))}_isReplaceGraphicalChange(t){return!!(this._isBitClear(t,12)&&this._isBitClear(t,13)&&this._isBitSet(t,14)&&this._isBitClear(t,15))}_getValidity(t){return this._isBitSet(t,2)?"OKAY":this._isBitSet(t,3)?"MISSING":this._isBitSet(t,4)?"QUESTIONABLE":this._isBitSet(t,5)?"REJECTED":"UNKNOWN"}_getRange(t){return this._isRange1(t)?"RANGE_1":this._isRange2(t)?"RANGE_2":this._isRange3(t)?"RANGE_3":"NO_RANGE"}_getReplaceCause(t){return this._isRevisedAutomatically(t)?"AUTOMATIC":this._isRevisedInteractively(t)?"INTERACTIVE":this._isRevisedManually(t)?"MANUAL":this._isRevisedToOriginalAccepted(t)?"RESTORED":"NONE"}_getReplaceMethod(t){return this._isReplaceLinearInterpolation(t)?"LIN_INTERP":this._isReplaceManualChange(t)?"EXPLICIT":this._isReplaceWithMissing(t)?"MISSING":this._isReplaceGraphicalChange(t)?"GRAPHICAL":"NONE"}_getTestFailed(t){let i=[];return this._isBitSet(t,16)&&i.push("ABSOLUTE_VALUE"),this._isBitSet(t,17)&&i.push("CONSTANT_VALUE"),this._isBitSet(t,18)&&i.push("RATE_OF_CHANGE"),this._isBitSet(t,19)&&i.push("RELATIVE_VALUE"),this._isBitSet(t,20)&&i.push("DURATION_VALUE"),this._isBitSet(t,21)&&i.push("NEG_INCREMENT"),this._isBitSet(t,23)&&i.push("SKIP_LIST"),this._isBitSet(t,25)&&i.push("USER_DEFINED"),this._isBitSet(t,26)&&i.push("DISTRIBUTION"),i.length?i.join("+"):"NONE"}getStringDescription(t,i=!1){let e=new Uint8Array(4);if(e[3]=255&t,e[2]=t>>8&255,e[1]=t>>16&255,e[0]=t>>24&255,i)return{QUALITY_CODE:t,SCREENED_ID:this._isScreened(e)?"SCREENED":"UNSCREENED",VALIDITY_ID:this._getValidity(e),RANGE_ID:this._getRange(e),CHANGED_ID:this._isDifferentValue(e)?"MODIFIED":"ORIGINAL",REPL_CAUSE_ID:this._getReplaceCause(e),REPL_METHOD_ID:this._getReplaceMethod(e),TEST_FAILED_ID:this._getTestFailed(e),PROTECTION_ID:this._isBitSet(e,32)?"PROTECTED":"UNPROTECTED"};if(this._isQualityClear(e))return"Quality is undetermined";let s=[];return this._isScreened(e)?s.push("Screened"):s.push("Not Screened?"),this._isBitSet(e,2)&&(s.length>0&&s.push(", "),s.push("Passed tests OK")),this._isBitSet(e,3)&&(s.length>0&&s.push(", "),s.push("Set to Missing")),this._isBitSet(e,4)&&(s.length>0&&s.push(", "),s.push("Questionable Quality")),this._isBitSet(e,5)&&(s.length>0&&s.push(", "),s.push("Rejected Quality")),this._isRange1(e)&&(s.length>0&&s.push("\n"),s.push("Value is between first and second range limit")),this._isRange2(e)&&(s.length>0&&s.push("\n"),s.push("Value is between second and third range limit")),this._isRange3(e)&&(s.length>0&&s.push("\n"),s.push("Value is above third range limit")),this._isDifferentValue(e)&&(s.length>0&&s.push("\n"),s.push("Current value is different from original value")),this._isRevisedAutomatically(e)&&(s.length>0&&s.push("\n"),s.push("Revised automatically by DATCHK or other Process")),this._isRevisedInteractively(e)&&(s.length>0&&s.push("\n"),s.push("Revised interactively with DATVUE or CWMS Verification Editor")),this._isRevisedManually(e)&&(s.length>0&&s.push("\n"),s.push("Manual entry with DATVUE or CWMS Verification Editor")),this._isRevisedToOriginalAccepted(e)&&(s.length>0&&s.push("\n"),s.push("Original value accepted in DATVUE or CWMS Verification Editor")),this._isReplaceLinearInterpolation(e)&&(s.length>0&&s.push("\n"),s.push("Replacement method: linear interpolation")),this._isReplaceManualChange(e)&&(s.length>0&&s.push("\n"),s.push("Replacement method: manual change")),this._isReplaceWithMissing(e)&&(s.length>0&&s.push("\n"),s.push("Replacement method: replace with missing value")),this._isReplaceGraphicalChange(e)&&(s.length>0&&s.push("\n"),s.push("Replacement method: graphical change")),this._isBitSet(e,16)&&(s.length>0&&s.push("\n"),s.push("Failed Test: Absolute Magnitude")),this._isBitSet(e,17)&&(s.length>0&&s.push("\n"),s.push("Failed Test: Constant Value")),this._isBitSet(e,18)&&(s.length>0&&s.push("\n"),s.push("Failed Test: Rate-of-change")),this._isBitSet(e,19)&&(s.length>0&&s.push("\n"),s.push("Failed Test: Relative Magnitude")),this._isBitSet(e,20)&&(s.length>0&&s.push("\n"),s.push("Failed Test: Duration-magnitude")),this._isBitSet(e,21)&&(s.length>0&&s.push("\n"),s.push("Failed Test: Negative Incremental Value")),this._isBitSet(e,23)&&(s.length>0&&s.push("\n"),s.push("Failed Test: On GAGE list as faulty gage")),this._isBitSet(e,25)&&(s.length>0&&s.push("\n"),s.push("Failed Test: User-defined Test")),this._isBitSet(e,26)&&(s.length>0&&s.push("\n"),s.push("Failed Test: Distribution Test")),this._isBitSet(e,32)&&(s.length>0&&s.push("\n"),s.push("PROTECTED from change or replacement")),s.toString()}generateColorPrefMap(){const t={},i=window.localStorage,e=getDefaultSymbolicBgColorMap(),s=getDefaultSymbolicFgColorMap();for(const n in e){const r="qf_color_"+n,h="qf_bg_color_"+n;t[r]=i.getItem(r)||s[n],t[h]=i.getItem(h)||e[n]}return t}getQualityPrefs(t){return window.localStorage.getItem(t+"."+this.name)}getQualityColorPrefs(t){return window.localStorage.getItem(t+"."+this.name+".color")}canEditQuality(t){return window.localStorage(`${this.name}.${t}.quality_flags_editable`)||!0}canShowQuality(t){return window.localStorage.getItem(`${this.name}.${t}.show_quality_flags`)||!0}setShowQuality(t,i){return window.localStorage.setItem(`${this.name}.${t}.show_quality_flags`,i)}setCanEditQuality(t,i){return window.localStorage.setItem(`${this.name}.${t}.quality_flags_editable`,i)}getColoredHtmlSymbolicString(t){return this.getColoredHtmlSymbolicString(t,generateColorPrefMap())}getColoredHtmlSymbolicString(t,i){const e=this.getSymbolicString(t)+this.getSymbolicRevisedString(t);return this.convertToColoredHtml(e,i)}getSymbolicString(t){return this.getString(t,4)}getString(t,i){let e=t,s=new Uint8Array(4);if(s[3]=255&e,s[2]=e>>8&255,s[1]=e>>16&255,s[0]=e>>24&255,0===i)return this.pad(e.toString(2),0);if(2===i)return this.pad(e.toString(16),2);if(1===i)return this.pad(e.toString(8),1);if(3===i)return e.toString();let n="";return 4===i?(this._isQualityClear(s)?n+=" * ":(isBitSet(s,32)?n+="P":n+=" ",isBitSet(s,3)&&(n+="M"),isBitSet(s,5)&&(n+="R"),isBitSet(s,4)&&(n+="Q"),1===n.length&&(n+=" ")),n):5===i?(isAccepted(s)?n+="A":isInterpolated(s)?n+="I":isKeyboardInput(s)?n+="K":isGraphicalEstimate(s)?n+="E":n+=" ",n):6===i?(isBitSet(s,16)&&(n+="AM"),isBitSet(s,17)&&(n.length>0&&(n+=","),n+="CV"),isBitSet(s,18)&&(n.length>0&&(n+=","),n+="RC"),isBitSet(s,19)&&(n.length>0&&(n+=","),n+="RM"),isBitSet(s,20)&&(n.length>0&&(n+=","),n+="DM"),isBitSet(s,21)&&(n.length>0&&(n+=","),n+="NI"),isBitSet(s,23)&&(n.length>0&&(n+=","),n+="GL"),isBitSet(s,25)&&(n.length>0&&(n+=","),n+="UD"),isBitSet(s,26)&&(n.length>0&&(n+=","),n+="DS"),n):e.toString(16)}pad(t,i){if(3===i)return t;const e=t.length,s=[32,11,8][i]-e;return this.PADDING[s]+t}setScreened_int(t){return this.setBit_int(t,1)}clearScreened_int(t){return this.clearBit_int(t,1)}isQuestion_int(t){return this.isBitSet_int(t,1)&&this.isBitSet_int(t,4)}clearQuestion_int(t){return this.setBit_int(this.clearBit_int(t,4),1)}setQuestion_int(t){let i=this.setBit_int(t,4);return i=this.clearBit_int(i,2),i=this.clearBit_int(i,3),i=this.clearBit_int(i,5),this.setBit_int(i,1)}clearReject_int(t){return this.setBit_int(this.clearBit_int(t,5),1)}setReject_int(t){let i=this.setBit_int(t,5);return i=this.clearBit_int(i,2),i=this.clearBit_int(i,4),i=this.clearBit_int(i,3),this.setBit_int(i,1)}clearRange_int(t){return this.clearBit_int(this.clearBit_int(t,6),7)}setRange0_int(t){return this.clearBit_int(this.clearBit_int(t,6),7)}setRange1_int(t){return this.clearBit_int(this.setBit_int(t,6),7)}setRange2_int(t){return this.setBit_int(this.clearBit_int(t,6),7)}setRange3_int(t){return this.setBit_int(this.setBit_int(t,6),7)}clearDifferentValue_int(t){return this.clearBit_int(t,8)}setDifferentValue_int(t){return this.setBit_int(t,8)}clearHowRevised_int(t){let i=this.clearBit_int(t,9);return i=this.clearBit_int(i,10),this.clearBit_int(i,11)}clearReplaceMethod_int(t){let i=this.clearBit_int(t,12);return i=this.clearBit_int(i,13),i=this.clearBit_int(i,14),this.clearBit_int(i,15)}setReplaceNoRevision_int(t){return this.clearReplaceMethod_int(t)}setNoRevision_int(t){let i=this.clearHowRevised_int(t);return this.clearReplaceMethod_int(i)}setRevisedAutomatically_int(t){let i=this.setOkay_int(t);return i=this.setDifferentValue_int(i),i=this.setBit_int(t,9),i=this.clearBit_int(i,10),this.clearBit_int(i,11)}isRevisedAutomaticallyCheckAllBits_int(t){return this.isBitSet_int(t,1)&&this.isBitSet_int(t,2)&&this.isBitClear_int(t,3)&&this.isBitClear_int(t,4)&&this.isBitClear_int(t,5)&&this.isBitSet_int(t,8)&&this.isRevisedAutomatically_int(t)}setRevisedInteractively_int(t){let i=this.setOkay_int(t);return i=this.setDifferentValue_int(t),i=this.clearBit_int(t,9),i=this.setBit_int(i,10),this.clearBit_int(i,11)}setRevisedManually_int(t){let i=this.setOkay_int(t);return i=this.setDifferentValue_int(t),i=this.setBit_int(t,9),i=this.setBit_int(i,10),this.clearBit_int(i,11)}setRevisedToOriginalAccepted_int(t){let i=this.setOkay_int(t);return i=this.clearBit_int(t,9),i=this.clearBit_int(i,10),i=this.setBit_int(i,11),this.setReplaceNoRevision_int(i)}setReplaceLinearInterpolation_int(t){let i=this.setOkay_int(t);return i=this.setDifferentValue_int(t),i=this.setBit_int(t,12),i=this.clearBit_int(i,13),i=this.clearBit_int(i,14),this.clearBit_int(i,15)}setReplaceManualChange_int(t){let i=this.setOkay_int(t);return i=this.setDifferentValue_int(t),i=this.clearBit_int(t,12),i=this.setBit_int(i,13),i=this.clearBit_int(i,14),this.clearBit_int(i,15)}setReplaceGraphicalChange_int(t){let i=this.setOkay_int(t);return i=this.setDifferentValue_int(t),i=this.clearBit_int(t,12),i=this.clearBit_int(i,13),i=this.setBit_int(i,14),this.clearBit_int(i,15)}setReplaceWithMissing_int(t){let i=this.setMissing_int(t);return i=this.setDifferentValue_int(t),i=this.setBit_int(t,12),i=this.setBit_int(i,13),i=this.clearBit_int(i,14),this.clearBit_int(i,15)}setMissing_int(t){let i=this.setBit_int(t,3);return i=this.clearBit_int(i,2),i=this.clearBit_int(i,4),i=this.clearBit_int(i,5),this.setBit_int(i,1)}clearMissing_int(t){return this.setBit_int(this.clearBit_int(t,3),1)}clearOkay_int(t){return this.setBit_int(this.clearBit_int(t,2),1)}setOkay_int(t){let i=this.setBit_int(t,2);return i=this.clearBit_int(i,3),i=this.clearBit_int(i,4),i=this.clearBit_int(i,5),this.setBit_int(i,1)}clearAbsoluteMagnitude_int(t){return this.clearBit_int(t,16)}setAbsoluteMagnitude_int(t){return this.setBit_int(t,16)}clearConstantValue_int(t){return this.clearBit_int(t,17)}setConstantValue_int(t){return this.setBit_int(t,17)}clearRateOfChange_int(t){return this.clearBit_int(t,18)}setRateOfChange_int(t){return this.setBit_int(t,18)}isRelativeMagnitude_int(t){return this.isBitSet_int(t,19)}clearRelativeMagnitude_int(t){return this.clearBit_int(t,19)}setRelativeMagnitude_int(t){return this.setBit_int(t,19)}clearDurationMagnitude_int(t){return this.clearBit_int(t,20)}setDurationMagnitude_int(t){return this.setBit_int(t,20)}clearNegativeIncremental_int(t){return this.clearBit_int(t,21)}setNegativeIncremental_int(t){return this.setBit_int(t,21)}clearAllTest_int(t){let i=this.clearBit_int(t,this.ABSOLUTEMAGNITUDE_BIT);return i=this.clearBit_int(i,this.CONSTANTVALUE_BIT),i=this.clearBit_int(i,this.RATEOFCHANGE_BIT),i=this.clearBit_int(i,this.RELATIVEMAGNITUDE_BIT),i=this.clearBit_int(i,this.DURATIONMAGNITUDE_BIT),i=this.clearBit_int(i,this.NEGATIVEINCREMENTAL_BIT),i=this.clearBit_int(i,this.GAGELIST_BIT),i=this.clearBit_int(i,this.USER_DEFINED_TEST_BIT),this.clearBit_int(i,this.DISTRIBUTIONTEST_BIT)}clearUserDefinedTest_int(t){return this.clearBit_int(t,25)}setUserDefinedTest_int(t){return this.setBit_int(t,25)}clearDistributionTest_int(t){return this.clearBit_int(t,26)}setDistributionTest_int(t){return this.setBit_int(t,26)}clearGageList_int(t){return this.clearBit_int(t,23)}setGageList_int(t){return this.setBit_int(t,23)}clearProtected_int(t){return this.setBit_int(this.clearBit_int(t,32),1)}setProtected_int(t){return this.setBit_int(this.setBit_int(t,32),1)}}